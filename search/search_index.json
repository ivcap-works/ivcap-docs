{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IVCAP Docs","text":"<p>Welcome to IVCAP.</p>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"API/artifact/","title":"Artifact","text":""},{"location":"API/artifact/#overview","title":"Overview","text":"<p>An <code>Artifact</code> is an individual image record, along with its associated MetaData held within IVCAP.  Upload an artifact with the Upload method, Get an individual records data and meta-data with the Read method, and search for an artifact with the List method.</p> Method HTTP request Description List GET /1/artifacts Returns a collection of zero or more <code>ArtifactListItem</code> that match the request criteria.  An individual artifact is accessed by the <code>Read</code> artifact method. Upload POST /1/artifacts Uploads an artifact and its associated metadata. Read GET /1/artifacts/{id} Retrieves the details for the artifact that matches the supplied <code>id</code> parameter."},{"location":"API/artifact/#methods","title":"Methods","text":""},{"location":"API/artifact/#list-artifacts-listartifact","title":"List artifacts {#ListArtifact}","text":""},{"location":"API/artifact/#common-use-cases","title":"Common use cases","text":"<p>This method is used to retrieve a collection of zero or more <code>ArtifactListItem</code> records that match the search criteria given via the parameters.  You can access the detail for an individual artifact with the <code>ArtifactStatusRT</code> object returned by the <code>Read</code> method.</p>"},{"location":"API/artifact/#list-artifacts-http-request","title":"List artifacts HTTP request","text":"<p>GET https://site.uri/1/artifacts</p>"},{"location":"API/artifact/#http-response-codes","title":"HTTP response codes","text":"Error code response type response resource 200 OK <code>ArtifactListRT</code> JSON resource 400 Bad Request response 401 Unauthorised response 403 Forbidden response <code>InvalidScopesT</code> json resource with the id of the resource in error and the error message. 501 Not Implemented response <code>NotImplementedT</code> json resource is returned which contains the an information message."},{"location":"API/artifact/#parameters","title":"Parameters","text":"Parameter Type Use Details $filter string <code>$filter=FirstName eq 'Scott'</code> The search term or string used to limit the result set $orderby string <code>$orderby=EndsAt desc</code> The order of the artifacts in the result set $top string $skip integer $select string offset integer limit integer pageToken string"},{"location":"API/artifact/#artifactlistrt-json-resource","title":"ArtifactListRT JSON Resource","text":"<p>The ArtifactListRT structure is returned by the [List Artifact]{#ListArtifact} method.</p> <pre><code>{\n  \"artifacts\"* [{\n    \"id\": \"string\",\n    \"links\"*: {\n        \"describedBy\": {\n          \"href\": \"uri\",\n          \"type\": \"string\"\n        },\n        \"self\": \"string\"\n    },\n    \"name\": \"string\",\n    \"status\": \"enum\"\n  }]\n  \"links\"*: {\n    \"first\": \"uri\",\n    \"next\": \"uri\",\n    \"self\": \"uri\"\n  },\n}\n</code></pre> Property artifacts Is an array of the [ArtifactListItem]{#ArtifactListItem} json objects. artifacts.id <code>string</code> which is the ID for the artifact in the system. artifacts.links contains the <code>describedBy</code> structure containing the resource <code>uri</code> and <code>type</code> and the <code>self</code> string element. artifacts.links.describedBy artifacts.links.describedBy.href <code>uri</code> the uri for the artifact artifacts.links.describedBy.type <code>string</code> description for the resource type artifacts.links.self <code>string</code> artifacts.name <code>string</code> artifacts.status <code>enum</code> can be one of <code>pending</code>, <code>building</code>, <code>ready</code>, or <code>error</code> links An optional element which contains the <code>NavT</code> json structure of the first, next, and self URIs. links.first <code>uri</code> the uri for the first ... links.next <code>uri</code> links.self <code>uri</code>"},{"location":"API/artifact/#artifactlistitem","title":"ArtifactListItem","text":"<p>The JSON structure used in a result set to refer to an individual Artifact record within the List.</p> <pre><code>{\n  \"id\": \"cayp:artifact:0000-000\",\n  \"links\"*: {\n      \"describedBy\": {\n        \"href\": \"https://api.com/swagger/...\",\n        \"type\": \"application/openapi3+json\"\n      },\n      \"self\": \"Cupiditate aperiam quo.\"\n  },\n  \"name\": \"Fire risk for Lot2\",\n  \"status\": \"ready\"\n}\n</code></pre> Property id <code>string</code> which is the ID for the artifact in the system. links contains the <code>describedBy</code> structure containing the resource <code>uri</code> and <code>type</code> and the <code>self</code> string element. links.describedBy links.describedBy.href <code>uri</code> the uri for the artifact links.describedBy.type <code>string</code> description for the resource type links.self <code>string</code> name <code>string</code> status <code>enum</code> can be one of <code>pending</code>, <code>building</code>, <code>ready</code>, or <code>error</code>"},{"location":"API/artifact/#upload-artifact-uploadartifact","title":"Upload artifact {#UploadArtifact}","text":""},{"location":"API/artifact/#common-use-cases_1","title":"Common use cases","text":"<p>Upload a new Artifact, or Update an existing Artifact using the <code>ArtefactStatusRT</code> resource.</p>"},{"location":"API/artifact/#upload-artifact-http-request","title":"Upload artifact HTTP request","text":"<p>POST https://site.uri/1/artifacts</p>"},{"location":"API/artifact/#http-response-codes_1","title":"HTTP response codes","text":"Error code response type response resource 201 Created response Response Headers 400 Bad Request response 401 Unauthorised response 403 Forbidden response 501 Not Implemented response"},{"location":"API/artifact/#201-created-response-headers","title":"201 Created response Headers","text":"Error code response type response resource Location string link record Tus-Resumable string version of TUS supported Upload-Offset int64 TUS offset for partially uploaded content"},{"location":"API/artifact/#request-headers","title":"Request Headers","text":"Parameter Type Use Details Content-Type string <code>application/x-netcdf4</code> the content type for the artifact Content-Encoding string <code>gzip</code> Content-Length int64 <code>2376</code> X-Name string <code>field-trip-jun-22</code> X-Collection string <code>field-trip-jun-22</code> Upload-Metadata string <code>filename</code> X-Content-Type string <code>application/x-netcdf4</code> Upload-Length int64 <code>2376</code> Tus-Resumable string <code>1.0.0</code>"},{"location":"API/artifact/#read-artifact-readartifact","title":"Read artifact {#ReadArtifact}","text":""},{"location":"API/artifact/#common-use-cases_2","title":"Common use cases","text":"<p>Upload a new Artifact, or Update an existing Artifact using the <code>ArtefactStatusRT</code> resource.</p>"},{"location":"API/artifact/#read-artifact-http-request","title":"Read artifact HTTP request","text":"<p>GET https://site.uri/1/artifacts/{id}</p>"},{"location":"API/artifact/#http-response-codes_2","title":"HTTP response codes","text":"Error code response type response resource 200 OK <code>ArtefactStatusRT</code> JSON resource 400 Bad Request response 401 Unauthorised response 403 Forbidden response 404 Artifact Not found response 501 Not Implemented response"},{"location":"API/artifact/#parameters_1","title":"Parameters","text":"Parameter Type Use Details id string The id for the artifact to return in the <code>ArtifactStatusRT</code> resource"},{"location":"API/artifact/#artifactstatusrt","title":"ArtifactStatusRT","text":"<pre><code>{\n  \"account\": {\n    \"id\": \"uri\", \n    \"links\": {\n      \"describedBy\": {\n        \"href\": \"uri\",\n        \"type\": \"string\"\n      },\n      \"self\": \"string\"\n    }\n  },\n  \"data\": {\n    \"describedBy\": {\n      \"href\": \"uri\",\n      \"type\": \"string\"\n    },\n    \"self\": \"string\"\n  },\n  \"id\"*: \"string\",\n  \"links\"*: {\n    \"describedBy\": {\n      \"href\": \"uri\",\n      \"type\": \"string\"\n    },\n    \"self\": \"string\"\n  },\n  \"metadata\": [{\n  \"name\": \"string\",\n  \"value\": \"string\"\n  }],\n  \"mime-type\": \"string\",\n  \"name\": \"string\",\n  \"size\": \"int64\",\n  \"status\"*: \"enum\"\n} \n</code></pre> Property account account.id <code>string</code> which is the ID for the artifact in the system. account.links contains the <code>describedBy</code> structure containing the resource <code>uri</code> and <code>type</code> and the <code>self</code> string element. account.links.describedBy account.links.describedBy.href <code>uri</code> the uri for the artifact account.links.describedBy.type <code>string</code> description for the resource type account.links.self <code>string</code> data contains the <code>describedBy</code> structure containing the resource <code>uri</code> and <code>type</code> and the <code>self</code> string element. data.describedBy data.describedBy.href <code>uri</code> the uri for the artifact data.describedBy.type <code>string</code> description for the resource type data.self <code>string</code> id <code>string</code> which is the ID for the artifact in the system. links contains the <code>describedBy</code> structure containing the resource <code>uri</code> and <code>type</code> and the <code>self</code> string element. links.describedBy links.describedBy.href <code>uri</code> the uri for the artifact links.describedBy.type <code>string</code> description for the resource type links.self <code>string</code> metadata the optional meta-data name - value pairs for the artifact metadata.name <code>string</code> metadata.value <code>string</code> mime-type <code>string</code> name <code>string</code> size <code>int64</code> status <code>enum</code> can be one of <code>pending</code>, <code>building</code>, <code>ready</code>, or <code>error</code>"},{"location":"API/orders/","title":"Orders","text":""},{"location":"API/orders/#overview","title":"Overview","text":"<p>Request analytics services on collections of artifacts with the <code>Order</code> methods.  Create, list, and Read orders to request an analytics service, check progress, or access the results of the service.</p> Method HTTP request Description List GET /1/orders Returns a collection of zero or more <code>OrderListItem</code> objects that match the request criteria.  An individual order is accessed by the <code>Read</code> order method. Create POST /1/orders Create an order using a service, supply necessary metadata and parameters.  Use the <code>OrderStatusRT</code> json object returned to access the order id, and other order information. Read GET /1/orders/{id} Retrieves the details for the order that matches the supplied <code>id</code> parameter."},{"location":"API/orders/#methods","title":"Methods","text":""},{"location":"API/orders/#list-orders","title":"List orders","text":""},{"location":"API/orders/#common-use-cases","title":"Common use cases","text":"<p>This method is used to retrieve a collection of zero or more <code>OrderListItem</code> records that match the search criteria given via the parameters.  Access an orders detail with the <code>Read</code> method, which returns the <code>OrderStatusRT</code> json object.</p>"},{"location":"API/orders/#list-orders-http-request","title":"List Orders HTTP request","text":"<p>GET https://site.uri/1/orders</p>"},{"location":"API/orders/#http-response-codes","title":"HTTP response codes","text":"Response code Response type Response resource 200 OK <code>OrderListRT</code> json resource that contains an array of the <code>OrderListItem</code> objects 400 Bad Request response 401 Unauthorised response 403 Forbidden response <code>InvalidScopesT</code> json resource with the id of the resource in error and the error message. 501 Not Implemented response <code>NotImplementedT</code> json resource is returned which contains the an information message."},{"location":"API/orders/#parameters","title":"Parameters","text":"Parameter Type Use Details $filter string <code>$filter=FirstName eq 'Scott'</code> The search term or string used to limit the result set $orderby string <code>$orderby=EndsAt desc</code> The order of the orders in the result set $top string $skip integer $select string offset integer limit integer pageToken string"},{"location":"API/orders/#orderlistrt-json-resource","title":"OrderListRT JSON Resource","text":"<p>Use the OrderListRT structure to discover the Orders and their status.</p> <pre><code>{\n    \"links\"*: {\n        \"first\": \"uri\",\n        \"next\": \"uri\",\n        \"self\": \"uri\"\n    },\n    \"orders\"*: [{\n        \"account_id\": \"string\",\n        \"finished_at\": \"string\",\n        \"id\": \"string\",\n        \"links\"*: {\n            \"describedBy\": {\n                \"href\": \"uri\",\n                \"type\": \"string\"\n            },\n            \"self\": \"string\",\n        },\n        \"name\": \"string\",\n        \"ordered_at\": \"string\",\n        \"service_id\": \"string\",\n        \"status\": \"enum\"\n    }]\n}\n</code></pre> Property links An optional element which contains the <code>NavT</code> json structure of the first, next, and self URIs. links.first <code>uri</code> the uri for the first order in the collection. links.next <code>uri</code> links.self <code>uri</code> orders Is an array of the OrderListItem json objects. orders.account_id <code>string</code> The account ID for the order. orders.finished_at <code>string</code> The date that the order finished. orders.id <code>string</code> The ID for the order. orders.links contains the <code>describedBy</code> structure containing the resource <code>uri</code> and <code>type</code> and the <code>self</code> string element. orders.links.describedBy orders.links.describedBy.href <code>uri</code> the uri for the order. orders.links.describedBy.type <code>string</code> description for the resource type. orders.links.self <code>string</code> orders.name <code>string</code> An optional, customer supplied name. orders.ordered_at <code>string</code> The date the order was requested. orders.service_id <code>string</code> The ID for the service for the order. orders.status <code>enum</code> can be one of <code>pending</code>, <code>executing</code>, <code>finished</code>, or <code>error</code>."},{"location":"API/orders/#orderlistitem-json-resource","title":"OrderListItem JSON Resource","text":"<p>The JSON structure used in a result set to provide the information for an individual order.</p> <pre><code>{\n    \"account_id\": \"string\",\n    \"finished_at\": \"string\",\n    \"id\": \"string\",\n    \"links\"*: {\n        \"describedBy\": {\n            \"href\": \"uri\",\n            \"type\": \"string\"\n        },\n        \"self\": \"string\"\n    },\n    \"name\": \"string\",\n    \"ordered_at\": \"string\",\n    \"service_id\": \"string\",\n    \"status\": \"enum\"\n}\n\n</code></pre> Property account_id <code>string</code> The account ID for the order. finished_at <code>string</code> The date that the order finished. id <code>string</code> The ID for the order. links contains the <code>describedBy</code> structure containing the resource <code>uri</code> and <code>type</code> and the <code>self</code> string element. links.describedBy links.describedBy.href <code>uri</code> the uri for the order. links.describedBy.type <code>string</code> description for the resource type. links.self <code>string</code> name <code>string</code> The optional, customer supplied name. ordered_at <code>string</code> The data that the order was requested. service_id <code>string</code> The ID for the service. status <code>enum</code> can be one of <code>pending</code>, <code>executing</code>, <code>finished</code>, or <code>error</code>"},{"location":"API/orders/#create-order","title":"Create order","text":""},{"location":"API/orders/#common-use-cases_1","title":"Common use cases","text":"<p>Create an order to start an analytics service on a data collection.  Use the <code>ServiceListItem.id</code> as the <code>serviceID</code> (the <code>ListService</code> method lists the available services) and supply the necessary metadata and parameters using the <code>OrderRequestT</code> json object. The <code>OrderStatusRT</code> json object contains the order details and is returned on success.</p>"},{"location":"API/orders/#list-services-http-request","title":"List services HTTP request","text":"<p>POST https://site.uri/1/orders</p>"},{"location":"API/orders/#http-response-codes_1","title":"HTTP response codes","text":"Error code response type response resource 200 Created response <code>ServiceStatusRT</code> json object with the service status and details. 400 Bad Request response. 401 Unauthorised response. 403 Forbidden response <code>InvalidScopesT</code> json resource with the id of the resource in error and the error message. 404 Not Found response <code>ResourceNotFoundT</code> json object containing the <code>id</code> of the missing resource and the <code>message</code> for the error. 422 Request contained semantically wrong parameter value response the <code>InvalidParameterValue</code> json object containing the <code>message</code> for the error, <code>name</code> of the parameter, and the <code>value</code> of the parameter with the bad value. 501 Not Implemented response <code>NotImplementedT</code> json resource is returned which contains the an information message. 503 Service Unavailable response."},{"location":"API/orders/#orderrequestt-json-resource","title":"OrderRequestT JSON Resource","text":"<p>Order a new analytics service workflow with the <code>OrderRequestT</code> json object.</p> <pre><code>{\n    \"accountID\"*: \"uri\",\n    \"metadata\"*: [{\n        \"name\": \"string\",\n        \"value\": \"string\"\n    }],\n    \"name\": \"string\",\n    \"parameters\"*: [{\n        \"name\": \"string\",\n        \"value\": \"string\"\n    }],\n    \"serviceID\"*: \"uri\"\n}\n</code></pre> Property accountID <code>uri</code> Reference to the account for the credit of revenues for the service. metadata Optional, meta data tags used for this service. metadata.name <code>string</code> metadata.value <code>string</code> name <code>string</code> An optional customer supplied name for the order. parameters Optional, the name/value parameters needed for the service. parameters.name <code>string</code> The name of the parameter. parameters.value <code>string</code> The value of the parameter. serviceID <code>string</code> The optional, customer supplied name."},{"location":"API/orders/#orderstatusrt-json-resource","title":"OrderStatusRT JSON Resource","text":"<pre><code>{\n    \"account\": {\n        \"id\": \"uri\",\n        \"links\": {\n            \"describedBy\": {\n                \"href\": \"uri\",\n                \"type\": \"string\"\n            },\n            \"self\": \"string\"\n        }\n    },\n    \"id\"*: \"uuid\",\n    \"links\": {\n        \"describedBy\": {\n            \"href\": \"uri\",\n            \"type\": \"string\"\n        },\n        \"self\": \"string\"\n    },\n    \"metadata\"*: [{\n        \"name\": \"string\",\n        \"value\": \"string\"\n    }],\n    \"name\": \"string\",\n    \"ordered_at\": \"string\",\n    \"parameters\"*: [{\n        \"name\": \"string\",\n        \"value\": \"string\"\n    }],\n    \"products\": [{\n        \"id\": \"string\",\n        \"links\": {\n            \"data\": \"string\",\n            \"describedBy\": {\n                \"href\": \"uri\",\n                \"type\": \"string\"\n            },\n            \"self\": \"string\"\n        }\n        \"mime-type\": \"string\",\n        \"name\": \"string\",\n        \"size\": \"int64\",\n        \"status\": \"string\"\n    }]\n    \"service\": {\n        \"id\": \"uri\",\n        \"links\": {\n                \"describedBy\": {\n                \"href\": \"uri\",\n                \"type\": \"string\"\n            },\n            \"self\": \"string\"\n        }\n    },\n    \"status\": \"enum\"\n}\n</code></pre> Property account The account details for the order . account.id <code>string</code> The ID for the account for the order. account.links which contains the <code>SelfT</code> json object (which contains the <code>DescribedByT</code> and <code>self</code> objects). account.links.describedBy The <code>DescribedByT</code> json object. account.links.describedBy.href <code>uri</code> account.links.describedBy.type <code>string</code> account.links.self <code>string</code> id <code>string</code> The ID for the order. links which contains the <code>SelfT</code> json object (which contains the <code>DescribedByT</code> and <code>self</code> objects). links.describedBy The <code>DescribedByT</code> json object. links.describedBy.href <code>uri</code> links.describedBy.type <code>string</code> links.self <code>string</code> metadata Optional, meta data tags used for this service. metadata.name <code>string</code> metadata.value <code>string</code> name <code>string</code> Optional customer supplied name for the order. ordered_at <code>string</code> Containing the order date, example: 2022-01-01. parameters Optional, the name/value parameters used for the order. parameters.name <code>string</code> The name of the parameter. parameters.value <code>string</code> The value of the parameter. products An array of the products that are created by the service for the order. products.id <code>string</code> The ID for the product. products.links which contains the <code>SelfWithDataT</code> json object (which contains the <code>data</code>, <code>DescribedByT</code>, and <code>self</code> objects). products.links.data <code>string</code> products.links.describedBy the <code>DescribedByT</code> Json object. products.links.describedBy.href <code>uri</code> products.links.describedBy.type <code>string</code> Example: 1705023718571840300. products.links.self <code>string</code> products.mime-type <code>string</code> products.name <code>string</code> products.size <code>int64</code> products.status <code>string</code> service Information for the service to satisfy the order. service.id <code>uri</code> Reference for service provider, example: http://erdman.name/vivien.renner service.links service.links.describedBy The <code>DescribedByT</code> json object. service.links.describedBy.href <code>uri</code> example:  https://api.com/swagger/... service.links.describedBy.type <code>string</code> example: application/openapi3+json service.links.self <code>string</code> status <code>enum</code> Can be one of <code>pending</code>, <code>executing</code>, <code>finished</code>, or <code>error</code>."},{"location":"API/orders/#read-order","title":"Read order","text":""},{"location":"API/orders/#common-use-cases_2","title":"Common use cases","text":"<p>Get the details for an order with the Read services method which returns the <code>OrderStatusRT</code> json object for supplied  id parameter.</p>"},{"location":"API/orders/#list-services-http-request_1","title":"List services HTTP request","text":"<p>GET https://site.uri/1/orders/{id}</p>"},{"location":"API/orders/#http-response-codes_2","title":"HTTP response codes","text":"Error code response type response resource 200 OK response <code>ServiceStatusRT</code> Json object with the service status and details. 400 Bad Request response 401 Unauthorised response 403 Forbidden response <code>InvalidScopesT</code> Json resource with the id of the resource in error and the error message. 404 Not Found response A service matching the <code>id</code> parameter is not found, of the missing resource and the <code>message</code> for the error. 501 Not Implemented response A json object containing the message for the error."},{"location":"API/orders/#parameters_1","title":"Parameters","text":"Parameter Type Use Details id string The id for the order to return in the <code>OrderStatusRT</code> resource."},{"location":"API/orders/#orderstatusrt-json-resource_1","title":"OrderStatusRT JSON Resource","text":"<p>The <code>OrderStatusRT</code> resource that contains the details for the service which matches the <code>{id}</code> parameter is given in the OK response.</p>"},{"location":"API/service/","title":"Service","text":""},{"location":"API/service/#overview","title":"Overview","text":"<p>A <code>Service</code> is an container for an analytics workflow template and its tasks. Systems users discover services using the <code>list service</code> method, and create an order for the service using the orders <code>create order</code> method.</p> <p>Create a new service with the <code>create service</code> method.  Read, update, and delete services with the respective <code>read service</code>, <code>update service</code>, and <code>delete service</code> methods.</p> <p>The <code>listOrders service</code> method returns a collection of the orders for a nominated service with the details for the order and its status.</p> Method HTTP request Description List service GET /1/services Returns a collection of zero or more <code>ServiceListItem</code> objects that match the request criteria.  An individual service is accessed by the <code>Read service</code> method. Create service POST /1/services Creates a new service with the details supplied in the <code>ServiceDescriptionT</code> json object.  The success response body from the create request is the <code>ServiceStatusRT</code> json object.  In some instances, the <code>CreateResponseBodyTiny2</code> object may be returned. Read service GET /1/services/{id} Returns the <code>ServiceStatusRT</code> json object containing the details of the service that matches the <code>id</code> parameter. Update service PUT /1/services/{id} Updates the Service that matches the <code>id</code> parameter with the details supplied in the <code>ServiceDescriptionT</code> json object.  The <code>force-create</code> parameter may be used to create the service where there is no service that matches the <code>id</code> parameter.  The success response body from the update request is the <code>ServiceStatusRT</code> json object.  In some instances, the <code>CreateResponseBodyTiny2</code> object may be returned. Delete service DELETE /1/services/{id} Deletes the service that matches the <code>id</code> parameter.  There is no response body on success."},{"location":"API/service/#methods","title":"Methods","text":""},{"location":"API/service/#list-services","title":"List services","text":""},{"location":"API/service/#common-use-cases","title":"Common use cases","text":"<p>This method is used to retrieve a collection of zero or more <code>ServiceListItem</code> records that match the search criteria given via the parameters.  You can access the detail for an individual artifact with the <code>ServiceStatusRT</code> object returned by the <code>Read</code> method.</p>"},{"location":"API/service/#list-services-http-request","title":"List services HTTP request","text":"<p>GET https://site.uri/1/services</p>"},{"location":"API/service/#http-response-codes","title":"HTTP response codes","text":"Error code response type response resource 200 OK <code>ServiceListRT</code> JSON resource 400 Bad Request response 401 Unauthorised response 403 Forbidden response 501 Not Implemented response"},{"location":"API/service/#parameters","title":"Parameters","text":"Parameter Type Use Details $filter string <code>$filter=FirstName eq 'Scott'</code> The search term or string used to limit the result set $orderby string <code>$orderby=EndsAt desc</code> The order of the artifacts in the result set $top string $skip integer $select string offset integer limit integer pageToken string"},{"location":"API/service/#servicelistrt-json-resource","title":"ServiceListRT JSON Resource","text":"<p>```json {     \"links\": {         \"first\": \"uri\",         \"next\": \"uri\",         \"self\": \"uri\"     }     \"services\": [{         \"description\": \"string\",         \"id\": \"string\",         \"links\"*: {             \"describedBy\": {                 \"href\": \"uri\",                 \"type\": \"string\"             },             \"self\": \"string\"         },         \"name\": \"string\",         \"provider\": {             \"id\": \"uri\",             \"links\": {                 \"describedBy\": {                     \"href\": \"uri\",                     \"type\": \"string\"                 },                 \"self\": \"string\"             }         }     }] }</p> <pre><code>\n| Property | |\n| ---- | --- |\n| links | optional, contains the `NavT` json object containing the resource `first`, `next`, and `self` uri elements. |\n| links.first | `uri` object describing the location of the first `ServiceListItem` in the collection |\n| links.next | `uri` the uri for the artifact |\n| links.self | `uri` description for the resource type |\n| services | an array of the `ServiceListItem` json objects, where each item contains |\n| services.description | `string` the brief (optional) description of the service |\n| services.id | `string` the ID for the service |\n| services.links | which contains the `SelfT` json object (which contains the `DescribedByT` and `self` objects) |\n| services.links.describedBy | the `DescribedByT` json object |\n| services.links.describedBy.href | `uri`  |\n| services.links.describedBy.type | `string`  |\n| services.links.self | `string`  |\n| services.name | `string` the name for the service |\n| services.provider | which contains the details for the provider of the service |\n| services.provider.id | `string` the ID for the service |\n| services.provider.links | which contains the `SelfT` json object (which contains the `DescribedByT` and `self` objects) |\n| services.provider.links.describedBy | the `DescribedByT` json object |\n| services.provider.links.describedBy.href | `uri`  |\n| services.provider.links.describedBy.type | `string`  |\n| services.provider.links.self | `string`  |\n\n#### ServiceListItem JSON Resource\n\n```json\n{\n    \"description\": \"string\",\n    \"id\": \"string\",\n    \"links\"*: {\n        \"describedBy\": {\n            \"href\": \"uri\",\n            \"type\": \"string\"\n        },\n        \"self\": \"string\"\n    },\n    \"name\": \"string\",\n    \"provider\": {\n        \"id\": \"uri\",\n        \"links\": {\n            \"describedBy\": {\n                \"href\": \"uri\",\n                \"type\": \"string\"\n            },\n            \"self\": \"string\"\n         }\n    }\n}\n</code></pre> Property description <code>string</code> a (optional) description of the service as supplied by the service provider. id <code>string</code> the service ID within IVCAP. links which contains a <code>SelfT</code> style json object (which contains the <code>DescribedByT</code> and <code>self</code> objects) links.describedBy the <code>DescribedByT</code> json object links.describedBy.href <code>uri</code> links.describedBy.type <code>string</code> links.self <code>string</code> name <code>string</code> Optional name for the service, as provided by the service provider(?). provider which contains the details for the provider of the service provider.id <code>string</code> the ID for the service provider provider.links which contains the <code>SelfT</code> json object (which contains the <code>DescribedByT</code> and <code>self</code> objects) provider.links.describedBy the <code>DescribedByT</code> json object provider.links.describedBy.href <code>uri</code> provider.links.describedBy.type <code>string</code> provider.links.self <code>string</code>"},{"location":"API/service/#create-services","title":"Create services","text":""},{"location":"API/service/#common-use-cases_1","title":"Common use cases","text":"<p>This method is used to create a new service with the details supplied in the <code>ServiceDescriptionT</code> json object.  The success response body from the create request is the <code>ServiceStatusRT</code> json object.  In some instances, the <code>CreateResponseBodyTiny2</code> object may be returned.</p>"},{"location":"API/service/#list-services-http-request_1","title":"List services HTTP request","text":"<p>POST https://site.uri/1/services</p>"},{"location":"API/service/#http-response-codes_1","title":"HTTP response codes","text":"Error code response type response resource 201 Created response <code>ServiceStatusRT</code> json object with the service status and details 400 Bad Request response 401 Unauthorised response 403 Forbidden response a json object containing the <code>id</code> of the resource and the <code>message</code> for the error 404 Not Found response a json object containing the <code>id</code> of the missing resource and the <code>message</code> for the error 409 Conflict response a json object containing the <code>id</code> of the conflicting resource and the <code>message</code> for the error 422 Request contained semantically wrong parameter value response the <code>InvalidParameterValue</code> json object containing the <code>message</code> for the error, <code>name</code> of the parameter, and the <code>value</code> of the parameter with the bad value. 501 Not Implemented response a json object containing the message for the error."},{"location":"API/service/#servicedescriptiont-json-resource","title":"ServiceDescriptionT JSON Resource","text":"<p>Specify or update the service workflow using the <code>ServiceDescriptionT</code> json object.  Service users will search for and use the service using the information provided with this object.</p> <p>```json {     \"account-id\": \"uri\",     \"banner\": \"uri\",     \"description\": \"string\",     \"metadata\": [{         \"name\": \"string\",         \"value\": \"string\"     }],     \"name\": \"string\",     \"parameters\": [{         \"constant\": \"boolean\",         \"default\": \"string\",         \"description\": \"string\",         \"label\": \"string\",         \"name\": \"string\",         \"optional\": \"boolean\",         \"options\": [{             \"description\": \"string\",             \"value\": \"string\"         }],         \"type\": \"string\",         \"unit\": \"string\",         \"help\": \"string\"     }],     \"provider-id\": \"uri\",     \"provider-ref\": \"string\",     \"references\": [{         \"title\": \"string\",         \"uri\": \"uri\"     }],     \"tags\": [\"string\"],     \"workflow\"*: {         \"argo\": \"binary\",         \"basic\": {             \"command\": [\"string\"],             \"cpu\": {                 \"limit\": \"string\",                 \"request\": \"string\"             },             \"image\": \"string\",             \"memory\": {                 \"limit\": \"string\",                 \"request\": \"string\"             }         },         \"opts\": \"binary\",         \"type\": \"string\"     } }</p> <pre><code>\n| Property | |\n| ---- | --- |\n| account-id | `uri` Reference to the account for the credit of revenues for this service |\n| banner | `uri` link to the banner image that may optionally be used for this service |\n| description | `uri` Detailed description of the service as supplied by the service provider. |\n| metadata | optional, meta data tags used for this service. |\n| metadata.name | `string` |\n| metadata.value | `string` |\n| name | `string` optional service name supplied by the service provider. |\n| parameters | an array of the `ServiceListItem` json objects, to define the service parameters. |\n| parameters.constant | `boolean` |\n| parameters.default | `string` |\n| parameters.description | `string` |\n| parameters.label | `string` |\n| parameters.name | `string` |\n| parameters.optional | `boolean` |\n| parameters.options |  |\n| parameters.options.description | `string`  |\n| parameters.options.value | `string`  |\n| parameters.type | `string` |\n| parameters.unit | `string` |\n| provider-id | `uri` Reference for service provider; `cayp:provider:acme` |\n| provider-ref | `string` Reference for provider, as a single string with punctuations allowed. |\n| references | References for this service. |\n| references.title | `string` title of the reference document |\n| references.uri | `uri` the link to the document |\n| tags | `string` - __What do these tags do?__ - |\n| workflow | Defines the workflow to use to execute this service. Currently supported 'types' are 'basic' and 'argo'. In case of 'basic', use the 'basic' element for further parameters. In the current implementation 'opts' is expected to contain the same schema as 'basic'. |\n| workflow.argo | `binary` the argo workflow definition using the argo WF schema |\n| workflow.basic |  |\n| workflow.basic.command | `[string]` The command needed to start the container, which is necessary in some container runtimes. |\n| workflow.basic.cpu | the [kubernetes Quantity documentation](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/) provides more information on the units. |\n| workflow.basic.cpu.limit | `string` minimal requirements [system limit] |\n| workflow.basic.cpu.request | `string` minimal requirements [0] |\n| workflow.basic.image | `string` the container image name |\n| workflow.basic.memory | the [kubernetes Quantity documentation](https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/) provides more information on the units. |\n| workflow.basic.memory.limit | `string` minimal requirements [system limit] |\n| workflow.basic.memory.request | `string` minimal requirements [0] |\n| workflow.opts | `string` Type specific options __Deprecated__: left for backward compatibility, if possible use type specific elements. |\n| workflow.type | `string` Type of workflow |\n\n#### ServiceStatusRT JSON Resource\n\n```json\n{\n    \"account\": {\n        \"id\": \"uri\",\n        \"links\": {\n            \"describedBy\": {\n                \"href\": \"uri\",\n                \"type\": \"string\",\n                },\n            \"self\": \"string\"\n        }\n    },\n    \"description\": \"string\",\n    \"id\"*: \"string\",\n    \"links\"*: {\n        \"describedBy\": {\n            \"href\": \"uri\",\n            \"type\": \"string\",\n        }\n        \"self\": \"string\",\n    },\n    \"metadata\": [{\n        \"name\": \"string\",\n        \"value\": \"string\"\n    }],\n    \"name\": \"string\",\n    \"parameters\"*: [{\n        \"constant\": \"boolean\",\n        \"default\": \"string\",\n        \"description\": \"string\",\n        \"label\": \"string\",\n        \"name\": \"string\",\n        \"optional\": \"boolean\",\n        \"options\": [{\n            \"description\": \"string\",\n            \"value\": \"string\",\n        }],\n        \"type\": \"string\",\n        \"unit\": \"string\"\n    }],\n    \"provider\": {\n        \"id\": \"uri\",\n        \"links\": {\n            \"describedBy\": {\n                \"href\": \"uri\",\n                \"type\": \"string\"\n            },\n            \"self\": \"string\"\n        }\n    },\n    \"provider-ref\": \"string\",\n    \"status\": \"enum\",\n    \"tags\": \"[string]\"\n} \n</code></pre> Property account <code>string</code> the ID for the service account.id <code>string</code> the ID for the service account.links which contains the <code>SelfT</code> json object (which contains the <code>DescribedByT</code> and <code>self</code> objects) account.links.describedBy the <code>DescribedByT</code> json object account.links.describedBy.href <code>uri</code> account.links.describedBy.type <code>string</code> account.links.self <code>string</code> description <code>string</code> the brief (optional) description of the service id <code>string</code> the ID for the service links which contains the <code>SelfT</code> json object (which contains the <code>DescribedByT</code> and <code>self</code> objects) links.describedBy the <code>DescribedByT</code> json object links.describedBy.href <code>uri</code> links.describedBy.type <code>string</code> links.self <code>string</code> metadata optional, meta data tags used for this service. metadata.name <code>string</code> metadata.value <code>string</code> name <code>string</code> optional service name supplied by the service provider. parameters an array of the <code>ServiceListItem</code> json objects, to define the service parameters. parameters.constant <code>boolean</code> parameters.default <code>string</code> parameters.description <code>string</code> parameters.label <code>string</code> parameters.name <code>string</code> parameters.optional <code>boolean</code> parameters.options parameters.options.description <code>string</code> parameters.options.value <code>string</code> parameters.type <code>string</code> parameters.unit <code>string</code> provider <code>uri</code> Reference for service provider; <code>cayp:provider:acme</code> provider.id <code>uri</code> Reference for service provider; <code>cayp:provider:acme</code> provider.links <code>uri</code> Reference for service provider; <code>cayp:provider:acme</code> provider.links.describedBy the <code>DescribedByT</code> json object provider.links.describedBy.href <code>uri</code> provider.links.describedBy.type <code>string</code> provider.links.self <code>string</code> provider-ref <code>string</code> Reference for provider, as a single string with punctuations allowed. status <code>enum</code> can be one of <code>pending</code>, <code>building</code>, <code>ready</code>, or <code>error</code> tags <code>[string]</code> optional tags provided in the ServiceDescriptionT for the service."},{"location":"API/service/#read-services","title":"Read services","text":""},{"location":"API/service/#common-use-cases_2","title":"Common use cases","text":"<p>Get the details for a service with the Read services method which returns the <code>ServiceStatusRT</code> json object for supplied service id parameter.</p>"},{"location":"API/service/#list-services-http-request_2","title":"List services HTTP request","text":"<p>GET https://site.uri/1/services/{id}</p>"},{"location":"API/service/#http-response-codes_2","title":"HTTP response codes","text":"Error code response type response resource 200 OK response <code>ServiceStatusRT</code> json object with the service status and details 400 Bad Request response 401 Unauthorised response 404 Not Found response a service matching the <code>id</code> parameter is not found, of the missing resource and the <code>message</code> for the error 501 Not Implemented response a json object containing the message for the error."},{"location":"API/service/#parameters_1","title":"Parameters","text":"Parameter Type Use Details id string The id for the artifact to return in the <code>ArtifactStatusRT</code> resource"},{"location":"API/service/#servicestatusrt-json-resource","title":"ServiceStatusRT JSON Resource","text":"<p>The <code>ServiceStatusRT</code> resource that contains the details for the service which matches the <code>{id}</code> parameter is given in the OK response.</p>"},{"location":"API/service/#update-services","title":"Update services","text":""},{"location":"API/service/#common-use-cases_3","title":"Common use cases","text":"<p>Update an existing service with the details supplied in the <code>ServiceDescriptionT</code> json object.  Similar to the Create Service method, the success response body contains the <code>ServiceStatusRT</code> json object. In some instances, the <code>CreateResponseBodyTiny2</code> object may be returned.</p> <p>Note: Force the service to be created with the <code>force-create</code> query-string parameter.</p>"},{"location":"API/service/#list-services-http-request_3","title":"List services HTTP request","text":"<p>PUT https://site.uri/1/services/{id}</p>"},{"location":"API/service/#http-response-codes_3","title":"HTTP response codes","text":"Error code response type response resource 200 Ok response <code>ServiceStatusRT</code> json object with the service status and details 400 Bad Request response 401 Unauthorised response 403 Forbidden response a json object containing the <code>id</code> of the resource and the <code>message</code> for the error 404 Not Found response a json object containing the <code>id</code> of the missing resource and the <code>message</code> for the error 409 Conflict response a json object containing the <code>id</code> of the conflicting resource and the <code>message</code> for the error 422 Request contained semantically wrong parameter value response the <code>InvalidParameterValue</code> json object containing the <code>message</code> for the error, <code>name</code> of the parameter, and the <code>value</code> of the parameter with the bad value. 501 Not Implemented response a json object containing the message for the error."},{"location":"API/service/#parameters_2","title":"Parameters","text":"Parameter Type Use Details id <code>string</code> The id for the artifact to return in the <code>ServiceStatusRT</code> resource force-create <code>boolean</code> force the creation of the <code>Service</code> resource"},{"location":"API/service/#servicedescriptiont-json-resource_1","title":"ServiceDescriptionT JSON Resource","text":"<p>The <code>ServiceDescriptionT</code> resource that contains the details to be used to update the service that matches the <code>{id}</code> parameter is given in the OK response.</p>"},{"location":"API/service/#servicestatusrt-json-resource_1","title":"ServiceStatusRT JSON Resource","text":"<p>The <code>ServiceStatusRT</code> resource contains the returned details for the service.</p>"},{"location":"API/service/#delete-service","title":"Delete service","text":""},{"location":"API/service/#common-use-cases_4","title":"Common use cases","text":"<p>Delete a service using the <code>DeleteService</code> method using the id to identify and delete the service. No content objects are necessary for this method.</p>"},{"location":"API/service/#list-services-http-request_4","title":"List services HTTP request","text":"<p>DELETE https://site.uri/1/services/{id}</p>"},{"location":"API/service/#http-response-codes_4","title":"HTTP response codes","text":"Error code response type response resource 204 No content response on successful deletion, the 204 No content response is returned. 400 Bad Request response 401 Unauthorised response 403 Forbidden response a json object containing the <code>id</code> of the resource and the <code>message</code> for the error 501 Not Implemented response a json object containing the message for the error."},{"location":"API/service/#parameters_3","title":"Parameters","text":"Parameter Type Use Details id string The id for the existing service to be deleted."},{"location":"API/service/#list-orders-service","title":"List Orders service","text":""},{"location":"API/service/#common-use-cases_5","title":"Common use cases","text":"<p>List the orders that have been placed for the service identified by the ID parameter.</p>"},{"location":"API/service/#list-services-http-request_5","title":"List services HTTP request","text":"<p>GET https://site.uri/1/services/{id}/orders</p>"},{"location":"API/service/#http-response-codes_5","title":"HTTP response codes","text":"Error code response type response resource 200 Ok response <code>ServiceStatusRT</code> json object with the service status and details 400 Bad Request response 401 Unauthorised response 403 Forbidden response a json object containing the <code>id</code> of the resource and the <code>message</code> for the error 404 Not Found response a json object containing the <code>id</code> of the missing resource and the <code>message</code> for the error 501 Not Implemented response a json object containing the message for the error."},{"location":"API/service/#parameters_4","title":"Parameters","text":"Parameter Type Use Details id string The service id used to identify the orders for the service."},{"location":"API/sessions/","title":"Create Sessions {#sessions}","text":"<p>After authentication Creates a session and returns the bearer token which must be inserted into the header of resource requests using the API</p>"},{"location":"API/sessions/#http-request","title":"HTTP Request","text":"<p>'POST /1/sessions'</p>"},{"location":"API/sessions/#request-headers","title":"Request headers","text":"<p>'Content-Type: application/json'</p>"},{"location":"API/sessions/#request-body","title":"Request body","text":"<p>The request body consists of a JSON object that contains the auth string</p> <p>Example</p> <pre><code>{\n  \"auth\": \"eyJhbGciOiJIUz...\"\n}\n</code></pre> <pre><code>Valid Request body elements                                           \n+---------+-----------+---------------------------------+\n| Element | Type      | Description                     |\n+---------+-----------+---------------------------------+\n| auth    | string    | the JWT used for authentication |\n+---------+-----------+---------------------------------+\n</code></pre>"},{"location":"API/sessions/#response","title":"Response","text":"<p>Response Headers</p>"},{"location":"developer-guide/","title":"Developer Guide","text":""},{"location":"developer-guide/#overview","title":"Overview","text":"<p>IVCAP enables researchers and analytics providers to use and develop analytics services that support a researcher's daily work.</p> <p>The intended audiences for this guide are the Researchers and Developers who intend to develop analytics services for IVCAP.</p> <p>A Python SDK has been published to facilitate the development of services and there is a sample service to help you get started using the SDK.</p>"},{"location":"developer-guide/#getting-started","title":"Getting started","text":"<p>IVCAP and its services are deployed to a Kubernetes (K8s) cluster, often hosted in a cloud environment.  Analytics service development will follow the CI/CD framework used by the custodian of IVCAP and can be developed locally using minikube.</p> <p>There are currently two types of services, a simple one consisting of a single compute task; and a workflow type containing one or more tasks. Workflow type services are currently managed and executed by an Argo workflow engine.</p> <p>In either case, the compute tasks are docker containers which will be executed according to a provided service plan as well user provider arguments and data.</p>"},{"location":"developer-guide/#security-considerations","title":"Security Considerations","text":"<p>Interacting with IVCAP via the REST API will need a bearer token in the header. The bearer token is attained via the 'create session' method.</p>"},{"location":"developer-guide/#authentication","title":"Authentication","text":"<p>IVCAP implements the oauth2 authentication model. Authentication for the user device is currently provided via the ivcap-cli command line interface.</p> <p>The <code>ivcap context login</code> illustrates the oauth2 authentication flow, token management, and the refresh of the JWT token within the service using Golang. Service providers may choose to implement authentication and token management within their service.</p>"},{"location":"developer-guide/#authorisation","title":"Authorisation","text":"<p>Authorisation protocols are set in the IVCAP core and are used to determine what, when, and how an authenticated user may access things within the system.</p> <p>For example, the controls may determine access to:</p> <ul> <li>List artifacts, i.e. May only generate a list of artifacts that are owned by the authenticated account.</li> <li>Read artifacts, May only return an artifact owned by the authenticated account.</li> <li>Allow authenticated users to upload artifacts, add metadata, add collections, etc.</li> <li>Restrict listing and returning order details to only those orders submitted by the account.</li> <li>Ensure orders are only created when the nominated account matches the authenticated user account.</li> <li>List services, but only be able to create or update them if they're a service provider and the service owner (for updates).</li> </ul>"},{"location":"developer-guide/architecture/","title":"Architecture from a developers perspective","text":"<p>The IVCAP platform makes use of best of breed, open source tools to minimise engineering complexity while maximising capability and flexibility. While IVCAP employs internal and external services, the developer does not need to interact with them. The complexity of the underlying service and architecture is simplified via the use of the SDK, which also abstracts and simplifies the API calls.</p>"},{"location":"developer-guide/architecture/#ivcap-components","title":"IVCAP components","text":"<p>IVCAP consists of loosely coupled, independent containerised technology components that support its flexibility, agility and adaptability. The underlying platform may be Google Cloud, Azure, or on your local machine using Minikube.</p> <p>Core External services and components include:</p> <ul> <li>Kubernetes to containerise and deploy services that provide analytics on IVCAP.  Use Minikube for a local install.</li> <li>Argo Workflows for sequencing analytics activities (tasks, parts of workflows, etc.) in workflow templates that provide the service.  Argo is used to execute all orders.</li> <li>Postgres that acts as an underlying database.</li> <li>Loki a monitoring and logging stack for storing logs and processing queries</li> <li>Promtail for gathering and sending logs to Loki</li> <li>Grafana for querying and displaying logs</li> </ul> <p>Internal Services included in IVCAP-core include:</p> <ul> <li>api_gateway: waits and listens for requests, authorises requests, directs requests to the requested analytics service, acts as the REST API endpoint.</li> <li>order_dispatcher: actions order requests and initiate service workflows.</li> <li>data_proxy: Provides access to, caching, and related logging of artifacts for services.</li> <li>storage_server: Muliple versions can be configured depending on the storage infrastructure to be used (e.g. cloud buckets, local file system, API supplied, ...)</li> </ul>"},{"location":"developer-guide/architecture/#containers","title":"Containers","text":"<p>IVCAP uses Kubernetes as the environment to run the containerised services. The container runtime used is containerd.</p>"},{"location":"developer-guide/deploy-services/","title":"Deploy Services","text":""},{"location":"developer-guide/deploy-services/#docker-provisioning","title":"Docker Provisioning","text":"<p>Name your service with a meaningful name.  Use camel case, replacing any dashes with underscores. Use the Dockerfile Allocate to build the docker image structure, add, and define resource settings that may include:</p> <ul> <li>files and folders</li> <li>listen ports</li> <li>idle timeout</li> <li>header size limits</li> <li>https</li> <li>connection policies</li> <li>paths for services</li> <li>method type</li> <li>default response types</li> </ul> <p>Build the docker image using the <code>docker build</code> command within Make. Use the Makefile for IVCAP services as an examples showing how docker images are built</p>"},{"location":"developer-guide/deploy-services/#docker-registering","title":"Docker Registering","text":"<p>Register your services docker image within Make using the <code>docker tag</code> and <code>docker push</code> commands. Running your registered docker service in the cloud environment within Make with the <code>docker -it --rm run</code> command.  Running locally in your dev env with mini-kube is simply a case of calling the container using its full path within Make.</p>"},{"location":"developer-guide/deploy-services/#tools","title":"Tools","text":"<p>Install the software used to develop and deploy services that may not be installed on a base system and may include:</p> <ul> <li>brew to install useful utilities and tools</li> <li>coreutils: <code>brew install coreutils</code></li> <li>yq: <code>brew install yq</code></li> <li>hyperkit is recommended for Minikube: <code>brew install hyperkit</code></li> <li>docker client: <code>brew install docker</code></li> <li>Kubernetes client: <code>brew install kubernetes-cli</code></li> <li>helm: <code>brew install helm</code></li> <li>argo: <code>brew install argo</code></li> </ul>"},{"location":"developer-guide/develop-services/","title":"Developing IVCAP services","text":""},{"location":"developer-guide/develop-services/#key-features-for-services","title":"Key features for services","text":"<p>When developing IVCAP services, critical to support users: * Provide the information to enable Finding or discovering your service from the services published on IVCAP * Provide information on the parameters and arguments that are required to Order your service * Checking the status should let the user know what went wrong if it wasn't able to terminate with success. * Provide information on the output so users can Retreiving the output after the service has terminated.</p> <p>IVCAP users find your service and accesses the information that tells them what it is, how to use it, and its output. </p>"},{"location":"developer-guide/develop-services/#argo","title":"Argo","text":"<p>Analytics services are implemented as Argo workflows.  Argo controls the execution of the services within the K8s cluster. Sandboxing the service runtime, data in and data out is provided via the REST API.  The Python SDK abstracts the REST API .  SANDBOXING </p> <p>Data In and Data out is made available to the service via the Api, or by using SDK functions.  Images for analysis are retrieved for processing via the API or the SDK <code>cache_file</code> funciton Link to cache_file desc. Output generated is stored via the API or the SDK <code>deliver</code> funciton</p> <p>At the heart of IVCAP is a kubernetes (K8s) cluster that holds the internal and related external services for the analytics services (argo workflows/containers), storage for the visual image collections (artifacts), their metadata, data for the requested analytics services (order parameters, metadata, etc.), and the products generated from the services (reports, new artifacts).</p> <p>Implement a service as an Argo workflow template and register it within IVCAP with a detailed description for why the service exists, what it service does, and how to use it.</p> <p>Ordering a service creates and executes an argo workflow using the parameters, metadata, artifacts, and the workflow template specified for the service.</p> <p>Services are executed in a sandbox environment, with their own context. Services do not interact with other services, workflows, or external data sources other than via the REST API methods. Access to input artifacts, data, or generated output is provided via the REST API methods. The complexity of using the API is abstracted with the Python SDK, and the CLI.</p> <p>Is / will there be a QA check / code review &amp; approval or similar for services built by the service providers?  If so, How does a service provider submit their service for review and subsequent approval?</p>"},{"location":"developer-guide/develop-services/#service-provider","title":"Service provider","text":"<p>Onboard as a service provider to build and register analytics services for the IVCAP platform. How does a service provider onboard? User your provider ID that is assigned to you when you onboard to register your services with IVCAP.</p> <p>Services providers can use the SDK and CLI to simplify and accelerate building and registering services.</p> <p>What resources are made available to the service providers?  Will they get the source code for the SDK?, CLI?, Sample service?</p> <p>Service providers are responsible for their own build and test environments</p>"},{"location":"developer-guide/develop-services/#service-description","title":"Service description","text":"<ul> <li>resolve this with the next topic Users use the service description metadata to search and discover the services. The Service information should describe what the service does, the context in which it works, any parameters it needs, and the artifacts it creates.</li> </ul>"},{"location":"developer-guide/develop-services/#discovering-a-service","title":"Discovering a service","text":"<p>Discover services using the service description information and the SDK, CLI, or the API.  (The SDK and the CLI abstract and simplify the complexity of the API calls) Users use the service description to find and choose the service to use. Use the list services method with the users search criteria to list the available services that match.</p> <p>The service description information will need to contain detailed information about:</p> <ul> <li>What the service is</li> <li>What the service does</li> <li>Why the service is provided</li> <li>How it should, and should not be used</li> <li>Its Configuration parameters</li> <li>Optional and required metadata</li> <li>A brief description of the workflow and its analytics tasks</li> </ul> <p>The service description should identify the Arguments, parameters, and meta-data that are used when ordering a service.  How to check the service status, and access the output of the service.</p> <p>Supply the service description for the service when it is created. Update the service description as necessary using the <code>update service</code> API method and the Service ID that is assigned to the service when the service is created.</p>"},{"location":"developer-guide/develop-services/#ordering-a-service","title":"Ordering a service","text":"<p>Start a service with the Create_order method, Service ID, service parameters, metadata and anything else specified in the service description. The service initiates the docker container registered for the service.  Complex services which have more than a single analytics task will typically run an argo workflow.</p> <p>Each service workflow order run in its own sandboxed container, isolating the service from all other applications. Messaging and external data access is provided by, and must use, the API.</p>"},{"location":"developer-guide/develop-services/#context-for-service-execution","title":"Context for service execution","text":"<p>Services are executed within the context of their container in Argo and do not directly interact with any other service.</p> <p>All data, communication, and instructions are provided by either the arguments and parameters used at startup, or via the SDK and API methods.</p> <p>All output and results from the service must be persisted by the SDK or API calls.</p> <p>Once the service has completed its execution, any localised or cached data will be released as the execution container is released.</p>"},{"location":"developer-guide/develop-services/#use-the-cli","title":"Use the CLI","text":"<p>The CLI provides a comprehensive client environment for interacting with the IVCAP and the analytics services.</p> <p>The CLI can be used to Discover, Order, Check the status of an order, and get the results of an order. </p>"},{"location":"developer-guide/integration-options/","title":"Integration options","text":""},{"location":"developer-guide/integration-options/#command-line-interface","title":"Command Line Interface","text":"<p>The Command Line Interface provides a simple to use interface for simple data operation with IVCAP. Ready to use binaries are available for download, with source code and earlier releases are also available on github.</p> <p>The command line interface may also be built and installed using the go command:</p> <pre><code>    go install https://github.com/ivcap-works/ivcap-cli@latest\n</code></pre> <p>View the ivcap-cli git repo for more information on using the command line interface.</p>"},{"location":"developer-guide/integration-options/#software-development-kit-sdk","title":"Software Development Kit - SDK","text":"<p>The Software Development Kit (SDK) is a python service that makes the IVCAP data objects and methods available to you to use in your service / application.</p> <p>See how to use the SDK with the Example IVCAP Service which demonstrates the key components needed for a service.</p>"},{"location":"developer-guide/integration-options/#rest-api","title":"REST API","text":"<p>Integrate your application with IVCAP using the REST API and [JSON]{https://jsonapi.org/} data objects.  The methods and JSON schemas are documented in this documentation.</p>"},{"location":"developer-guide/integration-options/#calling-the-rest-api","title":"Calling the Rest API","text":"<p>The API can be used to upload data or modify data, list services, book a service on the data, and retrieve the results.</p> <p>API requests to interact with IVCAP data and meta-data must have the JWT authorisation bearer token set, see [Sessions]{#Sessions} for more detail.</p>"},{"location":"developer-guide/running-locally/","title":"Running Locally","text":""},{"location":"developer-guide/running-locally/#local-environment-requirements","title":"Local Environment Requirements","text":"<p>Develop analytics services on your computer using python and the python SDK.  Run the application locally via: * python condo or pip (I'm not sure how this works) * compile into a docker image, run locally interacting with the local file system * compile into a docker image, run locally interacting with the IVCAP backend which may be prod, or non-prod * compile into a docker image, run with a local instance of IVCAP on minikube.</p> <p>For the full minikube environment install minikube, the support software for IVCAP, and the git repositories (repos) to configure and build the IVCAP services. Then download and build the Python SDK, Command Line Interface (CLI), and sample service to get started on your analytics service.</p>"},{"location":"developer-guide/running-locally/#software-and-tools-software","title":"Software and tools {#software}","text":"<p>The full IVCAP software suite Install includes:</p> <ul> <li>The Basic Tools</li> <li>Your code editing environment, such as <code>Visual Studio Code</code></li> <li><code>Github Desktop</code> or your preferred github client to clone or download a Github repository</li> <li>On MacOS, check that Homebrew (<code>brew</code>) is installed, as it is used to install and configure the IVCAP software components.</li> <li>The helper tools <code>coreutils</code> and <code>yq</code></li> <li><code>helm</code></li> <li>The Virtual cluster (minikube)</li> <li>Minikube, to act as your local kubernetes environment.</li> <li>Hyperkit enables hypervisor capabilities</li> <li>docker client <code>docker-cli</code></li> <li>kubernetes command line tool (<code>kubectl</code>, or <code>kubernetes-cli</code>) depending on your operating system:<ul> <li>Linux</li> <li>MacOS</li> <li>Windows</li> </ul> </li> <li>IVCAP Support Services, which includes:</li> <li>Mitterwald</li> <li>Argo Workflows</li> <li>Postgres</li> <li>Loki</li> <li>IVCAP</li> <li>sample service</li> <li>ivcap-cli for interacting with IVCAP</li> </ul> <p>These software components emulate the cloud based software environment, enabling you to develop and run services locally as they would in the deployed environment. The following sections will help you to install and configure the software for the development environment.</p> <p>The light-weigh service development environment includes: - the same Basic Tools as the full suite - optionally, the docker and kubernetes CLIs or the full Virtual cluster (minikube)   * docker client <code>docker-cli</code>   * kubernetes command line tool (<code>kubectl</code>, or <code>kubernetes-cli</code>) depending on your operating system:     * Linux     * MacOS     * Windows - the <code>Local Development environment</code>   * conda and pip   * sample service</p>"},{"location":"developer-guide/running-locally/#basic-tools","title":"Basic Tools","text":"<p>The basic environment includes the tools you would ordinarily use to develop software on your local computer. Use your preferred authoring tool to edit the code, <code>Visual Studio Code</code> is an example of a popular tool.</p> <p>Github manages the repositories (repos) for IVCAP and its services. A GitHub client is necessary to clone (copy and synchronise) the repos to your computer. <code>Github Desktop</code> simplifies the Github commands for cloning and synchronising the repos.</p> <p>Use Homebrew (<code>brew</code>) from the command line (shell environment) to install or configure software and access services via their command line tools.  <code>Brew</code> is usually installed on MacOS by default.</p> <p>Install <code>coreutils</code>, <code>yq</code>, and <code>helm</code> to prepare your computer for minikube and the IVCAP install.</p>"},{"location":"developer-guide/running-locally/#install-minikube","title":"Install minikube","text":"<p>The software environment for minikube includes: * On MacOS, check that Homebrew (<code>brew</code>) is installed.  Brew is used to install and configure the IVCAP software components. * The helper tools <code>coreutils</code> and <code>yq</code> * Hyperkit enables hypervisor capabilities * docker client <code>docker-cli</code> * install <code>kubectl</code> * install minikube * the kubernetes command line tool <code>kubernetes-cli</code> * Configure minikube using the installation instructions using the following link</p> <p>The detailed instructions for the installation and configuration for minikube is found in the IVCAP core install latest instructions</p> <p>Question for Max - There are additional configuration steps in the DEVELOPERS.md file, do we need to refer to any of those steps here? https://github.com/ivcap-works/ivcap-core/blob/develop/DEVELOPERS.md.</p>"},{"location":"developer-guide/running-locally/#support-services","title":"Support Services","text":"<p>After the minikube is installed and configured, the IVCAP support software can be installed. This installation is done by using the make-targets in the IVCAP repo.</p> <p>Ton install the support services:</p> <ul> <li>Check and install the tools <code>kubernetes-cli</code>, <code>helm</code>, and <code>argo</code></li> <li>Clone the IVCAP core github repo to your computer</li> <li>Open your favoured shell prompt (Ksh, Zsh, Power-Shell, etc.)</li> <li>Navigate to your local clone of IVCAP core</li> <li>deploy Mitterwald</li> <li>deploy Argo Workflow</li> <li>deploy and configure Postgres</li> <li>deploy and configure Loki</li> </ul>"},{"location":"developer-guide/running-locally/#deploy-ivcap","title":"Deploy IVCAP","text":"<p>Once the environment is functional, deploying the application and building it.</p> <p>After minikube and the support services are installed, and the IVCAP core repo is on your machine (details in Support Services), building and running a local instance of IVCAP is attained via the make target <code>helm-upgrade-minikube</code></p> <p>More information is found on the IVCAP Deployment page.</p>"},{"location":"developer-guide/running-locally/#developing-locally-local-dev","title":"Developing locally {#local-dev}","text":"<p>Download and install the sample service and review the <code>img_test_service.py</code> file to get started with writing your application.</p> <p>Review the <code>README</code> file in the <code>sample service</code> for the latest tips and information on how to install the service to run using conda or pip.</p> <p>Update the Makefile for the sample service to reflect your local environment.</p> <p>Use the <code>make clone-sdk</code> make-targets to clone the Python SDK to your computer and  for you to run.</p> <p>Use the <code>make run</code> target to run the sample service using python and test it out.</p> <p>Use the <code>make docker-build-local</code>, <code>make docker-publish-local</code>, and <code>make docker-run</code> make targets build the sample service to a local docker image, and enable it to run as a docker image</p> <p>Review and make changes to the code in the sample service. Build it with the make targets, and access IVCAP services with the CLI to test how your service runs.</p> <p>When running your service locally you can load images from the local file-system, or you can interact with IVCAP server for data storage. Use the service order parameters to provide the input files for the sample service.</p>"},{"location":"developer-guide/sdk-resources/","title":"SDK resources and methods","text":""},{"location":"developer-guide/sdk-resources/#sdk-module-resources-and-methods","title":"SDK module resources and methods","text":"<p>The more commonly used resources include:</p> Resource Resource type Description <code>Service</code> class the class describing the service and its methods: <code>from_file</code> class method Enables the data for the class to be read from a yaml file <code>to_dict</code> class method returns a dict of the parameters for the service <code>to_yaml</code> class method Enables the class data to be serialised into a yaml string (that can be dumped out to a file) <code>append_arguments</code> class method returns an ArgumentParser for the service parameters <code>Parameter</code> class defines the structure of the parameter as used in the service parameters <code>Type</code> class defines the parameter <code>SupportedMimeTypes</code> Enum An enumerated type for the supported MimeTypes of NETCDF, PNG, and JPEG <code>ServiceArgs</code> type a subtype of the str type <code>register_service</code> function is used to register the service with the IVCAP server <code>deliver_data</code> function is used to deliver the output of the service for storage <code>fetch_data</code> function is used to get an artifact to be used for analysis <code>create_metadata</code> function creates a metadata dict from the args"},{"location":"developer-guide/sdk-resources/#import-sdk-resources","title":"Import SDK resources","text":"<p>Import the specific <code>ivcap_sdk_service</code> resources that you will use in your service.  As this helps reduce the overall space requirements for your service.</p> <p>An example for importing the <code>ivcap_sdk_service</code> package resources:</p> <pre><code>from ivcap_sdk_service import Service, Parameter, Type, SupportedMimeTypes, ServiceArgs\nfrom ivcap_sdk_service import register_service, deliver_data, fetch_data, create_metadata\n</code></pre>"},{"location":"developer-guide/sdk-resources/#service","title":"Service","text":"<p>Describe and define the service data objects held using the Service dataclass which extends the JSONWizard class.  Describing the service defines the <code>ServiceDescriptionT</code> json fields needed for to call the service (handler) and holds the data which describes how to use the service.</p> <p>Note: Default values for the <code>service-id</code> (<code>id</code>), <code>provider-id</code>, and <code>account-id</code> are set in the container environment with the <code>MakeFile</code>.</p> <p>Define default values for the key arguments and data items in a <code>Service</code> object that is used to register your <code>service</code>, i.e.:</p> <pre><code># Define Service data and parameters\nMY_SERVICE_DEFINITION = Service(\n    name = \"service name\",\n    description = \"description that makes sense to service users\",\n    parameters = [\n        Parameter(\n            name='msg', \n            type=Type.STRING, \n            description='Message to display.'),\n            # ... List of data items and paramaters for the service object\n    ]\n)\n\n# Define service \ndef my_service(args: Dict, svc_logger: logging)\n    # ... code for your_service\n\n# Register service\nregister_service(MY_SERVICE_DEFINITION, my_service)\n</code></pre>"},{"location":"developer-guide/sdk-resources/#parameter","title":"Parameter","text":"<p>Pass data to the service using the parameters defined by the <code>Parameter</code> data class. Parameter extends JSONWizard and is used in the <code>parameters</code> JSON field within the <code>ServiceDescriptionT</code> json object.</p> <p>Read the parameters </p> <pre><code>MY_SERVICE_ARGS = Service(\n    #... define the collection of parameter values\n    parameters = [\n        Parameter(\n            name='msg', \n            type=Type.STRING, \n            description='Message to display.'),\n        Parameter(\n            name='img-art', \n            type=Type.ARTIFACT, \n            description='Image artifact to use as background.',\n            optional=True),\n        Parameter(\n            name='img-url', \n            type=Type.STRING, \n            description='Image url (external) to use as background.',\n            optional=True),\n        Parameter(\n            name='width', \n            type=Type.INT, \n            description='Image width.',\n            default=640),\n        Parameter(\n            name='height', \n            type=Type.INT, \n            description='Image height.',\n            default=480),\n    ]\n)\n\ndef my_service(args: Dict, svc_logger: logging)\n    # ... code for your_service\n    # Use parameter values with a simpler reference Create an image\n    img = Image.new(\"RGB\", (args.width, args.height), \"white\")\n    # Testing and using parameter values that have the parameter name de-hyphenated\n    if args.img_url:\n        # code\n</code></pre> <p>Note: Parameter JSON field names using hyphenated notation are converted to the Python naming convention for use within your code. I.e. <code>img-url</code> is referenced as <code>img_url</code> and <code>enable-auto-tune</code> is referenced as <code>enable_auto_tune</code> within your code.</p>"},{"location":"developer-guide/sdk-resources/#type","title":"Type","text":"<p>Use the global variable definitions for for the enumerated class Type for consistency, and to use only parameter types that are handled by the SDK and IVCAP.</p> <p>Supported parameter types include STRING, INT, FLOAT, BOOL, OPTION, and ARTIFACT. See their use in with Parameters.</p>"},{"location":"developer-guide/sdk-resources/#supportedmimetypes","title":"SupportedMimeTypes","text":"<p>Use the global variable definitions for for the enumerated class SupportedMimeTypes for types that are handled by the SDK and IVCAP.</p> <p>Supported mime types include NETCDF, PNG, and JPEG.</p> <p>See their use in with deliver_data.</p>"},{"location":"developer-guide/sdk-resources/#register_service","title":"register_service","text":"<p>Register your service with IVCAP using the <code>register_service</code> method with the service definition and the service code.  After your service is registered, users will be able to discover and use your service.</p> <p>Load the detailed service description and help information in the Parameter fields. </p> <p>Make the call to register_service after the service description, and the service handler definition.</p> Arg Description Default service (Service) The Service object to register handler (Callable[[Dict], int]) Service Command Return <code>SERVICE_RUN</code> attempts to run the service and passes the exit code to the system <code>SERVICE_FILE</code> creates a yaml file for the service parameters <code>SERVICE_HELP</code> creates the help text for how to use the service anything else Logs an entry for an unexpected command"},{"location":"developer-guide/sdk-resources/#deliver_data","title":"deliver_data","text":"<p>Save output and generated artifacts and metadata using the <code>deliver_data</code> helper function. The deliver_data function takes as its arguments the name for the artifact, either a lambda for the file or the data, and the meta data. </p> <p>Deliver saves the artifact and its metadata details and returns the saved url as is seen in the sample code. The sample code sets some meta-data, saves the image via the deliver function, and logs the action of saving the image and its url.</p> Arg Description Default name (str) User friendly name data_or_lambda (Union[Any, Callable[[IOWritable], None]]) The data to deliver. Either directly or a callback providing a file-like handle for the data mime_type (Union[str, SupportedMimeTypes]) The mime type of the data. Anything not starting with 'text' is assumed to be a binary content collection_name (Optional[str], optional) Optional collection name Default None metadata (Optional[Union[MetaDict, Sequence[MetaDict]]], optional) Key/value pairs (or list of k/v pairs) to add as metadata Default None seekable (bool, optional) If true, writable should be seekable (needed for NetCDF) Default False on_close (Optional[Callable[[Url]]], optional) Called with assigned artifact ID Default None Raises Description NotImplementedError Raised when no saver function is defined for 'type' Returns Description None <pre><code>    meta = create_metadata('urn:ivcap.test:simple-python-service', **args._asdict())\n    deliver_data(\"image.png\", lambda fd: img.save(fd, format=\"png\"), SupportedMimeTypes.JPEG, metadata=meta)\n</code></pre>"},{"location":"developer-guide/sdk-resources/#fetch_data","title":"fetch_data","text":"<p>Returns a file-like object providing the content of the reference file which may be the url or the ID for the file.</p> <p>Args:</p> Arg Description Default url (Url) the Url for the image, the Url is a subtype of the str type binary_content (bool) boolean for if the file for in the Url has binary content default True no_caching (bool) boolean for if the file is not to be cached default False seekable (bool) boolean for if the file is seekable default False Returns Description IOReadable The content of the artifact/item as a file-like object <p>Use:</p> <pre><code>    # Create an image\n    img = Image.new(\"RGB\", (args.width, args.height), \"white\")\n\n    # Add background\n    if args.img_url:\n        f = fetch_data(args.img_url)\n        background = Image.open(f)\n        img.paste(background)\n        f.close() # the above code does not close the file\n</code></pre>"},{"location":"developer-guide/sdk-resources/#create_metadata","title":"create_metadata","text":"<p>Returns a dict for the args with the given schema URN added.</p> <p>See create_metadata use in with deliver_data.</p> Arg Description Default schema (str) Schema URN mdict Optional (MetaDict) optional MetaDict is a (Dict[str, Union[str, Number, bool]]) type {} empty dict **args reference to the input arguments Returns Description Dict a copy of the Args with the an additional entry for the schema"},{"location":"developer-guide/sdk/","title":"Software Development Kit (SDK)","text":"<p>Use the SDK to simplify developing services for the IVCAP platform using Python. The SDK abstracts the complexity of the underlying service architecture and API calls used in IVCAP clients and services.</p>"},{"location":"developer-guide/sdk/#using-the-sdk-for-the-ivcap_service","title":"Using the sdk for the ivcap_service","text":"<p>Start using the SDK easily by locating, downloading and starting your service repo from the ivcap-works ivcap-python-service-example repo on github.</p> <p>Make the IVCAP Demo service using the instructions in the <code>README</code></p> <p>Import the high level resources and methods from <code>ivcap_sdk_service</code> and use them to build your service to accelerate development and ensure consistency and data integrity for the data used and generated with your service.</p>"},{"location":"developer-guide/sdk/#use-cases","title":"Use Cases","text":""},{"location":"developer-guide/sdk/#implement-a-service","title":"Implement a service","text":"<p>Build a complete service using the SDK and Python to build the container, interface with IVCAP and the main service.</p>"},{"location":"developer-guide/sdk/#run-an-analytics-engine","title":"Run an analytics engine","text":"<p>Build an deployable service for an analytics engine that may be an existing application. Where the existing application can be a self-contained executable running as though it was running on a local machine. Use the SDK with Python to build the container, setup the environment and analytics pre-conditions, interface with IVCAP, manage the data (source input files, and store output/results), run and monitor the analytics service/application, update reporting, and clean-up the post analytics environment nicely.</p>"},{"location":"developer-guide/sdk/#building-a-service","title":"Building a Service","text":"<p>When building your service, consider structuring your code to mirror the core items at play.</p> <p>One approach might be to define a simple service to carry out a single task over a collection of Artifacts. The overall service package structure may be as simple as a support class to for the iterating over the collection, the getting and putting of the artifacts and another class to carry out the task on an artifact.</p> <p>Services that contain more than one task are known as complex services.</p> <p>needed things for a service: * Service Object with key fields populated * The service method * service registration</p>"},{"location":"developer-guide/sdk/#service-name","title":"Service Name","text":"<p>Name your service that helps your users understand what it does, for example the service <code>load_artifacts</code> is a descriptive name.  A more detailed description of the service, along with how to use it should be provided in the Service description</p>"},{"location":"developer-guide/sdk/#service-description","title":"Service description","text":"<p>Help service users to discover and use your service by setting this key information in the Service <code>object</code>. This information should help the users to discover your service, describe what it is, what it does, what to use it for (and what not to use it for), how to use it, and the parameters they should provide.</p> <p>This example shows the service name and description being set in the <code>name</code>, and <code>description</code> fields, along with some `parameters   that are to be used by the service.</p> <pre><code>SERVICE = Service(\n    name = \"load-artifact\",\n    description = \"Service to test loading and saving of artifacts\",\n    parameters = [\n        Parameter(\n            name='msg',\n            type=Type.STRING,\n            description='Message to display.'),\n        Parameter(\n            name='model',\n            type=Type.ARTIFACT,\n            description='Model to use (tgz archive of all needed components)'),\n        Parameter(\n            name='image',\n            type=Type.ARTIFACT,\n            description='Image to analyse'),\n        Parameter(\n            name='batch-size',\n            type=Type.INT,\n            description='Mini batch size of one gpu or cpu.',\n            default=1),\n        # ... Parameters used by your service and any default values they may have.\n    ]\n)\n</code></pre> <p>Set your <code>providerID</code> with your ivcap provider number, i.e. <code>ivcap:provider:0000-0000-0000</code></p>"},{"location":"developer-guide/sdk/#define-the-service","title":"Define the service","text":"<p>Define the entrypoint (main method) for the service</p> <pre><code>def service(args: Dict, logger: logging):\n    logger.info(f\"Called with {args}\")\n    with args.load.open(asBinary=False) as f:\n        # your service code...\n</code></pre> <p>Register the service with using the <code>register_service</code> method</p> <pre><code>register_service(SERVICE, load_artifact)\n</code></pre>"},{"location":"developer-guide/using-ivcap/","title":"Using ivcap","text":""},{"location":"developer-guide/using-ivcap/#usage","title":"Usage  <p>The easiest way to interact with an IVCAP deployment is to install the <code>ivcap</code> cli tool from the Github release page.</p> <p>After downloading and installing it on you machine you'll need to create a context for every IVCAP deployment. For instance, if you have installed a local deployment with minikube and DNS integration, you would run:</p> <pre><code>ivcap config create-context minikube --url http://ivcap.minikube\n</code></pre> <p>followed by a login:</p> <pre><code>ivcap login foo@testing.com\n</code></pre> <p>After that, you should be able to list the deployed services:</p> <pre><code>% ivcap services list\n+--------------------------+---------------------+---------------------------------+\n| ID                       | NAME                | PROVIDER                        |\n+--------------------------+---------------------+---------------------------------+\n| cayp:service:d939b74d... | Gradient Text Image | cayp:provider:1a18fe6b-ffd4-... |\n+--------------------------+---------------------+---------------------------------+\n</code></pre> <p>To list the details of a service:</p> <pre><code>% ivcap service get cayp:service:d939b74d-0070-59a4-a832-36c5c07e657d\n\n          ID  cayp:service:d939b74d-0070-59a4-a832-36c5c07e657d\n        Name  Gradient Text Image\n Description  Creates an image with a customizable text.\n      Status  ???\n Provider ID  cayp:provider:1a18fe6b-ffd4-594b-89fb-4c3e8b3ac188:testing.com\n  Account ID  cayp:account:58d8e161-9a2b-513a-bd32-28d7e8af1658:testing.com\n  Parameters  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n              \u2502 NAME    \u2502 DESCRIPTION \u2502 TYPE     \u2502 DEFAULT \u2502\n              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n              \u2502     msg \u2502             \u2502 string   \u2502 ???     \u2502\n              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n              \u2502 img-art \u2502             \u2502 artifact \u2502 ???     \u2502\n              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n              \u2502 img-url \u2502             \u2502 string   \u2502 ???     \u2502\n              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>A more basic way to interact with a deployment is to open it's home screen <code>https://api.....</code></p> <p></p> <p>We also providing SDKs for python (ivcap-sdk-python), ... to build services to deploy on a platform as well as consume them from an external application, such as a Jupyter notebook.</p>","text":""},{"location":"getting-started/installing-cli/","title":"IVCAP CLI Tool","text":"<p>The <code>ivcap</code> CLI tool provides a convenient way to interaction with an IVCAP deployment from the command line</p>"},{"location":"getting-started/installing-cli/#installation","title":"Installation","text":"<p>The <code>ivcap</code> CLI tool here are ready to use binaries for some architectures available at the repo's release tab.</p> <p>If you use homebrew, you can install it by:</p> <pre><code>brew tap brew tap ivcap-works/ivcap\nbrew install ivcap\n</code></pre> <p>Please verify at this point that you can successfully log into the IVCAP cluster of your choice. See the Configure context for a specific deployment section in the ivcap-cli repo.</p> <pre><code>% ivcap context get\n+-------------+--------------------------------+\n| Name        | gke-dev                        |\n| URL         | https://develop.ivcap.net      |\n| Account ID  | urn:ivcap:account:45a06508...  |\n| Authorised  | yes, refreshing after ...      |\n+-------------+--------------------------------+\n</code></pre>"},{"location":"getting-started/installing-cli/#usage","title":"Usage\u00b6","text":"<p>Here is a quick overview of the most useful ivcap command line interface (CLI) commands.</p> <pre><code>  artifact    Create and manage artifacts\n  aspect      Create and manage aspects\n  collection  Create and manage collections\n  order       Create and manage orders\n  service     Create and manage services\n\n  context     Manage and set access to IVCAP deployments\n  help        Help about any command\n</code></pre> <p>See the CLI repo for more details.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>To see how IVCAP works, we will order the simple <code>hello-world</code> service and view  the computed artifacts.</p> <p>The steps required are:</p> <ul> <li>find the service</li> <li>... then order it</li> <li>... check on progress</li> <li>... list created artifacts</li> <li>... download image</li> </ul> <p>But before we can proceed, please ensure that the following prerequisites\u00b6 are in place and that you an successfully authenticate with your respective IVCAP deployment. When all that is done, proceed to the Our First Order section below.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites\u00b6","text":"<p>Before you start you need to have access to an IVCAP deployment and have the <code>ivcap-cli</code> tool installed (see instructions).</p>"},{"location":"getting-started/quick-start/#authenticate","title":"Authenticate","text":"<p>Almost all interactions with IVCAP require an authorisation token. To obtain this token, use the <code>ivcap context login</code> command:</p> <pre><code>% ivcap context login\n\n    \u2588\u2580\u2580\u2580\u2580\u2580\u2588    \u2580\u2588  \u2584\u2580\u2584\u2580\u2580 \u2584\u2584\u2580\u2584 \u2588\u2580\u2580\u2580\u2580\u2580\u2588\n    \u2588 \u2588\u2588\u2588 \u2588 \u2588  \u2588\u2580 \u2580\u2588\u2580 \u2588  \u2580\u2580\u2588  \u2588 \u2588\u2588\u2588 \u2588\n    \u2588 \u2580\u2580\u2580 \u2588 \u2588 \u2580\u2580\u2584\u2580\u2580\u2580\u2580\u2588\u2580 \u2580\u2588 \u2580\u2580 \u2588 \u2580\u2580\u2580 \u2588\n    \u2580\u2580\u2580\u2580\u2580\u2580\u2580 \u2588\u2584\u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2584\u2588 \u2580 \u2580\u2580\u2580\u2580\u2580\u2580\u2580\n    \u2588 \u2588\u2588\u2580\u2580\u2580\u2584\u2584\u2584 \u2584 \u2588\u2588 \u2588\u2588\u2584\u2588\u2580\u2584\u2588\u2584\u2588 \u2588\u2588\u2580\u2588\u2588 \u2584\n    \u2588\u2580\u2584\u2584 \u2580\u2580  \u2588 \u2588\u2580\u2588\u2580\u2580\u2580\u2588\u2584  \u2588  \u2588 \u2584 \u2588\u2584\u2588\u2580\n...\nTo login to the IVCAP Service, please go to:  https://id-provider.com/activate?user_code=....\nor scan the QR Code to be taken to the login page\nWaiting for authorisation...\n</code></pre>"},{"location":"getting-started/quick-start/#our-first-order","title":"Our First Order","text":"<p>As mentioned above, an IVCAP deployment provides a set of services which a user can order. An order in this context is a request to execute the steps defined by a service and optionally customised by service specific parameters provided by the user at the time of order. The order execution will usually create a set of artifacts (aka dataset, image, table) which the user can download or use as input to another order.</p> <p>An analogy would be a designer shoe store, which lists a set of shoe designs (aka services) were a user can order a specific design, additionally defining shoe size or color. This will trigger the manufacturing of a new pair of shoes (aka artifact) based on the specific design as well as the user specifications of shoe size and color.</p> <p>For our first order, we will request the creation of an image with the obligatory \"Hello World\" message. As mention above the following steps required are:</p> <ul> <li>find the service</li> <li>... then order it</li> <li>... check on progress</li> <li>... list created artifacts</li> <li>... download image</li> </ul>"},{"location":"getting-started/quick-start/#find-the-service","title":"Find the Service","text":"<p>So let's start with finding the service:</p> <pre><code>% ivcap service list --filter \"name~='hello-world-python'\"\n+----+--------------------+--------------------------------+\n| ID | NAME               | ACCOUNT                        |\n+----+--------------------+--------------------------------+\n| @1 | hello-world-python | urn:ivcap:account:45a06508-... |\n+----+--------------------+--------------------------------+\n</code></pre> <p>We can get more information on it with:</p> <pre><code>% ivcap service get @1\n\n          ID  urn:ivcap:service:8e048dfc-... (@1)\n        Name  hello-world-python\n Description  A simple IVCAP service using the IVCAP Service SDK to create an ...\n  Account ID  urn:ivcap:account:45a06508-...\n  Parameters  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n              \u2502 NAME           \u2502 DESCRIPTION            \u2502 TYPE     \u2502 DEFAULT \u2502 OPTIONAL \u2502\n              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n              \u2502            msg \u2502 Message to display.    \u2502 string   \u2502         \u2502 false    \u2502\n              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500|\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n              \u2502 background-img \u2502 Image artifact to use  \u2502 artifact \u2502         \u2502 true     \u2502\n              \u2502                \u2502 as background.         \u2502          \u2502         \u2502          \u2502\n              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500-\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n              \u2502          width \u2502 Image width.           \u2502 int      \u2502 640     \u2502 false    \u2502\n              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n              \u2502         height \u2502 Image height.          \u2502 int      \u2502 480     \u2502 false    \u2502\n              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"getting-started/quick-start/#order-the-service","title":"Order the Service","text":"<p>As we can see from the parameters listing we can not only set the message, but also choose an optional background image, as well as the width and height. So let's be not too creative with the message, but a bit more playful with the background.</p> <pre><code>% ivcap order create -n \"test image order #1\" urn:ivcap:service:8e048dfc-4605-503e-85a4-03c77f98bf2e \\\n     msg=\"Hello World\" \\\n     background-img=https://wallpaperaccess.com/full/4482737.png\nOrder 'urn:ivcap:order:394a877c-1231-4f4f-93f0-93bf738a49e5' with status 'pending' submitted.\n</code></pre> <p>We have now successfully ordered the service with order ID <code>urn:ivcap:order:394a877c-1231-4f4f-93f0-93bf738a49e5</code></p>"},{"location":"getting-started/quick-start/#check-on-progress","title":"Check on Progress","text":"<p>The <code>ivcap order get urn:ivcap:order:...</code> command allows us to monitor the status of an order.</p> <pre><code>% ivcap order get urn:ivcap:order:394a877c-1231-4f4f-93f0-93bf738a49e5\n\n         ID  urn:ivcap:order:394a877c-1231-4f4f-93f0-93bf738a49e5 (@5)\n       Name  test image order #1\n     Status  executing\n    Ordered  2 minutes ago\n    Service  hello-world-python (@6)\n Account ID  urn:ivcap:account:45a06508-...\n Parameters  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n             \u2502             msg =  Hello World                                  \u2502\n             \u2502  background-img =  https://wallpaperaccess.com/full/4482737.png \u2502\n             \u2502           width =  640                                          \u2502\n             \u2502          height =  480                                          \u2502\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   Products\n   Metadata  \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n             \u2502 @3 \u2502 urn:ivcap:schema:order-uses-workflow.1 \u2502\n             \u2502 @4 \u2502 urn:ivcap:schema:order-placed.1        \u2502\n             \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>As we can see from the above <code>Status  executing</code>, the order is now being executed. At some later stage we can try again:</p> <pre><code>% ivcap orders get @1\n\n         ID  urn:ivcap:order:394a877c-1231-4f4f-93f0-93bf738a49e5 (@8)\n       Name  test image order #1\n     Status  succeeded\n    Ordered  17 hours ago (23 Jun 24 16:18 AEST)\n    Service  hello-world-python (@9)\n Account ID  urn:ivcap:account:45a06508-5c3a-4678-8e6d-e6399bf27538\n Parameters  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n             \u2502             msg =  Hello World                                  \u2502\n             \u2502  background-img =  https://wallpaperaccess.com/full/4482737.png \u2502\n             \u2502           width =  640                                          \u2502\n             \u2502          height =  480                                          \u2502\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   Products  \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n             \u2502 @3 \u2502 image.png \u2502 image/jpeg \u2502\n             \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   Metadata  \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n             \u2502 @4 \u2502 urn:ivcap:schema:order-uses-workflow.1     \u2502\n             \u2502 @5 \u2502 urn:ivcap:schema:order-produced-artifact.1 \u2502\n             \u2502 @6 \u2502 urn:ivcap:schema:order-placed.1            \u2502\n             \u2502 @7 \u2502 urn:ivcap:schema:order-finished.1          \u2502\n             \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"getting-started/quick-start/#list-created-artifacts","title":"List Created Artifacts","text":"<p>In \"order\" lingo the artifacts created by an order are called \"products\". In the above listing there is only one \"product\" (@3)</p> <pre><code>% ivcap artifact get @3\n\n         ID  urn:ivcap:artifact:aee2decd-... (@4)\n       Name  image.png\n     Status  ready\n       Size  44 kB\n  Mime-type  image/jpeg\n Account ID  urn:ivcap:account:45a06508-...\n   Metadata  \u250c\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n             \u2502 @1 \u2502 urn:ivcap:schema:artifact.1                  \u2502\n             \u2502 @2 \u2502 urn:ivcap:schema:artifact-producedBy-order.1 \u2502\n             \u2502 @3 \u2502 urn:example:schema:simple-python-service     \u2502\n             \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"getting-started/quick-start/#download-image","title":"Download Image","text":"<p>Finally, we can download and view that image:</p> <pre><code>% ivcap artifact download @4 -f /tmp/image.png\n... downloading file 100% [==============================] (1.0 MB/s)\n</code></pre> <p>which may look like:</p> <p></p>"},{"location":"operator-manual/","title":"Operator Guide","text":""},{"location":"operator-manual/#overview","title":"Overview","text":"<p>The Intelligent Visual Collaboration Analytics Platform IVCAP operates as a Software as a Service that enables researchers and analytics providers to use and implement services to collect, process, or analyse visual datasets.</p> <p>IVCAP is a complex software system using a microservices architecture that enables flexibility, portability, component reuse, and service providers to add custom bespoke services tailored to their specific user needs. The configuration management is captured and managed in the IVCAP-core Repo along with the code.</p>"},{"location":"operator-manual/#intended-audience","title":"Intended audience","text":"<p>The intended audience for this guide is the Systems Engineers and Admin staff who provision cloud services and will deploy, support and maintain the IVCAP systems.</p>"},{"location":"operator-manual/#onboarding","title":"Onboarding","text":"<p>Onboarding service providers involves setting up their account permissions to allow them to load and register new services. There is no automation, and each service provider will need to be allocated a service provider ID.</p> <p>New service providers must have contracts in place that specify what they can provide, and the term of their access.  Details of who will be provided access and how their CI/CD processes will work and integrate must be specified.</p> <p>The CI/CD processes for a service provider will specify how new services are migrated from development to non-production and the standards to be met for production deployment.</p>"},{"location":"operator-manual/architecture/","title":"Architecture","text":""},{"location":"operator-manual/architecture/#architecture","title":"Architecture","text":"<p>IVCAP uses a microservices architecture, where services are deployed as docker images to run within a Kubernetes (K8S) cluster.</p> <p>The microservices include external support software, the internal services that comprise IVCAP, and the published analytics services. Service execution is controlled via Argo workflows where each service has its own sandboxed execution space and communication between services occurs via the API.</p> <p>Service providers can access a python software development kit (SDK) that helps simplify building analytics services for IVCAP.  Sample applications are available to demonstrate the SDK use.</p> <p>IVCAP uses cloud infrastructure such as Azure, Amazon Web Services (AWS) to host its constituent services and software components. Terraform is used to provision and manage the infrastructure.</p>"},{"location":"operator-manual/architecture/#external-applications-services","title":"External applications &amp; services","text":"<p>Core External services and components include: * Kubernetes to containerise and deploy discrete services that provide analytics on IVCAP.  Use Minikube for a local install. * Magda to hold, catalogue and manage the IVCAP data and meta-data. * Argo Workflows for sequencing analytics activities (tasks, parts of workflows, etc.) in workflow templates that provide the service.  Argo is used to execute all orders. * Minio for object and data storage. * Postgres that acts as an underlying database. * Mitterwald to share authorisation tokens and secrets between services. * Loki a monitoring and logging stack for storing logs and processing queries   * Promtail for gathering and sending logs to Loki   * Grafana an endpoint for querying and displaying logs</p>"},{"location":"operator-manual/architecture/#internal-services","title":"Internal services","text":"<p>The internal services are built with the IVCAP deployment and include: * Api_gateway: acts as the REST API endpoint, authorises requests, and directs requests to the appropriate service. * Order_dispatcher: actions order requests and initiate service workflows. * Data_proxy: Provides access to, caching, and related logging of artifacts for services. * Exit_handler: Reports the exit state of orders to update the order records in Magda.</p>"},{"location":"operator-manual/architecture/#namespaces","title":"Namespaces","text":"<p>Namespaces are used to isolate internal and underlying services from the analytics services that are accessible for systems users. Namespaces are discussed in the how to Deploy IVCaP on Azure Kubernetes Service.</p>"},{"location":"operator-manual/installation/","title":"Installation","text":""},{"location":"operator-manual/installation/#installation","title":"Installation","text":"<p>Detailed Installation steps for IVCAP deployment are found at ivcap-core/deploy/, including deployments to minikube, Azure, or GCP.</p> <ol> <li>Provision infrastructure using Terraform</li> <li>Create a new cluster</li> <li>Access the cluster</li> <li>Install Kubernetes</li> <li>Install IVCAP into the K8s environment</li> <li>Start using the services</li> </ol>"},{"location":"operator-manual/installation/#provision-infrastructure","title":"Provision Infrastructure","text":"<p>Provision infrastructure and deploy a kubernetes cluster in your cloud subscription. Using terraform to provision the platform and install core software components as per the configuration files.</p> <p>Adjust the values and settings in the configuration files (Makefiles, yaml, and shell scripts) found in the <code>/deploy</code> sub-folders to suit your deployment.</p>"},{"location":"operator-manual/installation/#use-terraform-in-an-azure-subscription","title":"Use Terraform in an Azure subscription","text":"<p>The <code>/deploy/</code> directory contains information that describes how to Deploy IVCAP on Azure Kubernetes Service (AKS), which describes what you need to be able to deploy a new cluster using Terraform Enterprise (an example of provisioning with a Terraform Cloud subscription).</p> <p>After provisioning the terraform workspace and deploying the K8s cluster, access the cluster to Deploy IVCAP into the cluster by installing and building its software and services.</p> <p>The installation and configuration of the software components use the kubernetes client, helm, and argo in addition to the terraform scripts.</p> <p>A quick overview of the procedure highlights: * Create a version controlled workspace * Integrate with your DevOps version control repository (repo and terraform working directories) * Configure the Terraform Variables and authentication secrets/passwords (may also be set in a terraform.tfvars file) * Set the Environment Variables that validate the workspace as being a valid member of your cloud * Create the cluster / initial deployment * Use kubectl to Access the Cluster * Install the necessary software components needed to build IVCAP * Use the makefile targets to build and configure the IVCAP components</p> <p>Note: Mitterwald, Argo Workflows, and Postgres must be installed prior to deploying IVCAP.  A docker registry must also be available to register the docker components for K8s.</p>"},{"location":"operator-manual/installation/#key-configuration-files","title":"Key configuration files","text":"<p>Review the terraform resources, modules and variables definition files in the <code>/deploy/aks/deploy/terraform/</code> directory.</p> application file description terraform <code>versions.tf</code> Terraform and required providers defined terraform <code>main.tf</code> The main terraform script with the initial data, provider, and module resource definitions for provisioning and creating the environment terraform <code>variables.tf</code> Terraform variable and object definitions (for this deployment, a .tf.json file is not used) helm <code>tfe-backend.hcl</code> The .hcl configuration file used to define the cloud resource terraform <code>cluster-resources/aks.tf</code> The primary Azure Kubernetes service data and resource settings terraform <code>cluster-resources/datalake.tf</code> Azure data storage and virtual network resource settings terraform <code>cluster-resources/outputs.tf</code> Output definitions for the terraform provisioning.  Note: Use the sensitive flag to avoid the inadvertent sharing of secrets, usernames, or passwords terraform <code>cluster-resources/rg.tf</code> Cluster resource group definitions terraform <code>cluster-resources/variables.tf</code> Cluster resource variable definitions terraform <code>cluster-setup/main.tf</code> The main terraform script which calls Helm and a provisioner script are used to install and configure the software services terraform <code>cluster-setup/variables.tf</code> Variable definitions used during the cluster setup magda <code>config/magda-config/templates/auth-secrets.yaml</code> Contains the settings for application internal communication secrets using <code>mittwald</code> magda <code>config/magda-config/chart.yaml</code> Magda components configuration and version settings magda <code>config/magda-config/values.yaml</code> Key settings and values for the magda configuration argo <code>config/argo.yaml</code> configuration used for Argo istio <code>config/istio.yaml</code> configuration used for istio minio <code>config/minio.yaml</code> configuration used for minio"},{"location":"operator-manual/installation/#cluster-setup-terraform-and-helm","title":"Cluster-setup, Terraform and Helm","text":"<p>Set up the K8S cluster using Terraform and the <code>cluster-setup/main.tf</code> file. The <code>main.tf</code> file uses <code>helm</code> and a provisioner script to install and configure the IVCAP services:</p> Service name description sealed_secrets_controller sealed-secrets-controller With the namespace <code>kube-system</code> cert-manager cert-manager to TODO kubernetes_replicator kubernetes-replicator Mittwald is used to manage the secure sharing of credentials and secrets between the constituent systems and services argo_controller argo Argo workflows are used to manage and execute the services.  The configuration is held in the file: <code>config/argo.yaml</code> minio_controller argo-artifacts Minio manages the storage of artifacts used for Argo.  The configuration is held in the file <code>config/minio.yaml</code>.  Note: extra arguments may be set to be stored at: <code>https://${var.storage_acc_name}.blob.core.windows.net</code> kube config file local.kube_config_path The path to the config file for the kube configuration Provisioner <code>cluster-setup.sh</code> A Generic local-exec provisioner script is used to install and configure software components used for IVCAP magda magda using configuration files located in the <code>config/magda-config</code> directory to setup magda with the <code>config/magda-config/values.yaml</code> configuration file"},{"location":"operator-manual/installation/#the-cluster-setup-script","title":"The cluster-setup script","text":"<p>Install and configure the additional services automatically with the <code>cluster-setup.sh</code> script.</p> <p>The services installed or configured include: 1. Install kubectl 1. Create the namespace for the \"order-runner\" 1. Create the namespace for \"minio\" 1. Add label to kube-system namespace 1. Install sealed-secrets as the <code>kubeseal</code> 1. Install istio 1. Install the <code>config/istio.yaml</code> configuration to istio 1. Deploy and configure the docker secret 1. Deploy and configure the minio secret 1. Deploy and configure the storage secret 1. Deploy and configure the blob secret 1. Deploy and configure the ACME secret 1. Deploy the manifests.</p>"},{"location":"operator-manual/installation/#terraform-on-non-azure-platform","title":"Terraform on Non-Azure platform","text":"<p>Create the new Terraform Workspace</p>"},{"location":"operator-manual/installation/#secrets-and-the-sensitive-flag","title":"Secrets and the sensitive flag","text":"<p>Note: use the <code>sensitive</code> flag when generating output scripts and variable files to avoid the accidental sharing of secrets (passwords, etc.), for example:</p> <pre><code>output \"db_username\" {\n  description = \"Database administrator username\"\n  value       = aws_db_instance.database.username\n  sensitive   = true\n}\n\noutput \"db_password\" {\n  description = \"Database administrator password\"\n  value       = aws_db_instance.database.password\n  sensitive   = true\n}\n</code></pre>"},{"location":"operator-manual/installation/#applications-and-services","title":"Applications and Services","text":"<p>Check the deployment configuration for the prerequisite software for deploying IVCAP: 1. Mitterwald 1. Argo Workflows 1. Postgres</p> <p>Use the makefile in the <code>/deploy</code> directory to deploy the services using the make targets <code>helm-upgrade-gke</code> or <code>helm-upgrade-aks</code> depending on your environment. Deploying to minikube has its own make target <code>helm-upgrade-minikube</code>.</p> <p>More details are found at ivcap-core/deploy/</p>"},{"location":"operator-manual/installation/#installing-new-releases-and-upgrades","title":"Installing new releases and upgrades","text":"<p>Keeping system components current is set in the <code>makefile</code>, and the configuration file for the <code>terraform-plan</code> (in the <code>/ci/</code> directory).</p> <p>Using the makefile to upgrade software components is achieved by running the make command within the confines of your CI/CD framework.</p> <p>It is possible to specify the software component release version to mitigate the risk of an inadvertent component upgrade.</p>"},{"location":"operator-manual/installation/#service-upgrades","title":"Service upgrades","text":"<p>When planning to upgrade the system component services (such as Argo), one approach might be: * Stop accepting new requests through the <code>api_gateway</code> (which may be achieved by modifying the ingress configuration as per your SOPs) * Wait for existing requests to finish from the <code>api_gateway</code> and the <code>order_dispatcher</code> (which are short lived) * Upgrade the component or components * Start accepting new requests through the <code>api_gateway</code> again.</p>"},{"location":"operator-manual/installation/#storage-upgrades","title":"Storage upgrades","text":"<p>Upgrades to the <code>database</code> or <code>storage_proxy</code> are recommended to wait until active workflows have finished before proceeding with the upgrade.</p>"},{"location":"operator-manual/security/","title":"Security","text":""},{"location":"operator-manual/security/#security","title":"Security","text":"<p>The overall security posture is defined as \"honest but curious\".</p> <p>Meaning that while data is encrypted between users &amp; their service, it is generally not encrypted within the cluster.</p> <p>Users must authenticate to gain access to their service in a meaningful way.  Their ability to interact with their service is governed by policy authorisation using <code>OPA</code> <code>Rego</code> configuration files.</p> <p>It is recommended that operators implement threat and vulnerability scanning before publishing containers into the cluster.</p>"},{"location":"operator-manual/security/#authentication","title":"Authentication","text":"<p>IVCAP implements the oauth2 authentication model. Authentication for the user device is currently provided via the ivcap-cli command line interface.</p> <p>The cli login command illustrates the oauth2 authentication flow, token management, and the refresh of the JWT token within the service using golang. Service providers may choose to implement the authentication and token management within their service.</p> <p>Update the details for the oauth provider in the <code>/api-gateway/public/authinfo.yaml</code> yaml. <code>Authinfo.yaml</code> is used to authenticate the user connection with the oauth provider you specify. While the data structure suggests multiple providers may be allowed, only the single provider is currently supported.</p>"},{"location":"operator-manual/security/#authorisation","title":"Authorisation","text":"<p>Authorisation is controlled using the Open Policy Agent (OPA) rules set in the Rego Policy and query language.</p> <p>OPA is a technology independent open source policy central policy language for use in cloud environments and can enforce policies in microservices, Kubernetes, CI/CD, API Gateways, and related services.</p> <p>Use the <code>.rego</code> files (found in the IVCAP-core <code>api_gateway/opa/default/</code> directory) to hold the policy rules for actions you want to <code>allow</code> (or not allow) with the services.</p> <p>The rules files define if the caller is allowed to call a particular service, define the results the user may see, and define the actions a user may take.</p> <p>Review the getting started OPA documentation for more information on writing <code>Rego</code> files.</p> <p>An example of how the rules are used in the <code>artifact.rego</code> shows how a default deny, followed by the allowed actions for an authenticated account:</p> <pre><code>package cayp.artifact\n\ndefault list_in = {\"allow\": false}\n\ndefault read_out = {\"allow\": false}\n\ndefault upload_in = {\"allow\": false}\n\ndefault addcollection_in = {\"allow\": false}\n\ndefault removecollection_in = {\"allow\": false}\n\ndefault addmetadata_in = {\"allow\": false}\n\ndefault removemetadata_in = {\"allow\": false}\n\n# Extend list queries to only include the account holder's orders\nlist_in = {\"allow\": true, \"account-id\": aid} {\n    aid := input.requester.Account\n}\n\n# Only return the details of a single artifact if the\n# requester's 'Account.ID' is identical to the account ID associated with the artifact\nread_out = {\"allow\": true} {\n    c_acc := acc2uuid(input.requester.Account)\n    r_acc := acc2uuid(input.data.response.Projected.Account.ID)\n    print(\"c_acc:\", c_acc, \"r_acc:\", r_acc)\n    c_acc = r_acc\n}\n\n# Only accept artifacts where the 'Artifact.AccountID' in the payload\n# is identical to the account ID (jwt: 'acc') of the caller\nupload_in = {\"allow\": true} {\n    print(\"upload_in!!!\", input.requester.Account)\n    isAccount(input.requester.Account)\n}\n</code></pre>"},{"location":"operator-manual/security/#logging","title":"Logging","text":"<p>User activities should be logged, and those logs moved to long term-storage for interrogation when needed.</p>"},{"location":"operator-manual/security/#apis","title":"APIs","text":"<p>All APIs require that the connecting application has a valid JWT token. An error is returned when a valid JWT token is not present.</p>"},{"location":"operator-manual/security/#encryption","title":"Encryption","text":"<p>Data exchanged between the service and external users and services is encrypted in transit.  However data transfer between the services inside the K8s cluster is generally not encrypted.</p> <p>This also means that third party containers executed inside the cluster may have access to the data used and stored for the services necessitating more solid security reviews and testing on service delivery &amp; deployment.</p>"},{"location":"operator-manual/security/#publishing-containers","title":"Publishing containers","text":"<p>Container scanning for security and vulnerability threats prior to publishing them to the Container registry may be contingent on the hosted environment.</p> <p>A robust policy of scanning containers for security and vulnerability threats should take place prior to publishing containers to the non-prod or  testing is recommended to be implemented by the system operators.</p> <p>A program of code reviews may help mitigate the threat of the code within the containers being used for untoward activities.</p>"}]}